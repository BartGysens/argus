diff --git a/ldap_servers/LdapServer.class.php b/ldap_servers/LdapServer.class.php
index 1fa9f37..599317c 100644
--- a/ldap_servers/LdapServer.class.php
+++ b/ldap_servers/LdapServer.class.php
@@ -463,6 +463,10 @@ class LdapServer {
       return FALSE;
     }
 
+    if (!empty($attributes['unicodePwd']) && ($this->ldap_type == 'ad')) {
+      $attributes['unicodePwd'] = ldap_servers_convert_password_for_active_directory_unicodePwd($attributes['unicodePwd']);
+    }
+
     $result = @ldap_add($this->connection, $dn, $attributes);
     if (!$result) {
       $error = "LDAP Server ldap_add(%dn) Error Server ID = %sid, LDAP Err No: %ldap_errno LDAP Err Message: %ldap_err2str ";
@@ -548,6 +552,11 @@ class LdapServer {
         $old_attributes =  $entries[0];
       }
     }
+
+    if (!empty($attributes['unicodePwd']) && ($this->ldap_type == 'ad')) {
+      $attributes['unicodePwd'] = ldap_servers_convert_password_for_active_directory_unicodePwd($attributes['unicodePwd']);
+    }
+
     $attributes = $this->removeUnchangedAttributes($attributes, $old_attributes);
 
     foreach ($attributes as $key => $cur_val) {
diff --git a/ldap_servers/ldap_servers.functions.inc b/ldap_servers/ldap_servers.functions.inc
index 928d3e6..cfd0159 100644
--- a/ldap_servers/ldap_servers.functions.inc
+++ b/ldap_servers/ldap_servers.functions.inc
@@ -48,6 +48,28 @@ function ldap_password_modify($userdn, $new_password, $ldap_server) {
 }
 
 /**
+ * Converts a password to the format that Active Directory supports (for the 
+ * purpose of changing or setting).  Note that AD needs the field to be called
+ * unicodePwd (as opposed to userPassword)
+ * 
+ * @param string $password
+ *    The password that is being formatted for Active Directory unicodePwd field
+ * @return string
+ *    $password surrounded with quotes and in UTF-16LE encoding
+ */
+function ldap_servers_convert_password_for_active_directory_unicodePwd($password) {
+  // This function can be called with $attributes['unicodePwd'] as an array.
+  if (!is_array($password)) {
+    return mb_convert_encoding("\"{$password}\"", "UTF-16LE");
+  }
+  else {
+    // Presumably there is no use case for there being more than one password in
+    // the $attributes array, hence it will be at index 0 and we return in kind.
+    return array(mb_convert_encoding("\"{$password[0]}\"", "UTF-16LE"));
+  }
+}
+
+/**
  *
  *  this attempts to find bad dns, but should only be used as warnings
  *  as the ldap spec allows for any old character to be escaped and ldap
diff --git a/ldap_user/ldap_user.module b/ldap_user/ldap_user.module
index 85aca83..3a7f91d 100644
--- a/ldap_user/ldap_user.module
+++ b/ldap_user/ldap_user.module
@@ -492,6 +492,15 @@ function ldap_user_form_password_policy_password_tab_alter(&$form, &$form_state)
 }
 
 /**
+* Implements hook_form_FORM_ID_alter(). for user-pass-reset form.  Useful for
+* sites where this is the form ID for a user to intially set their password
+* (user clicks an emailed registration link, is prompted to set their password).
+*/
+function ldap_user_form_user_pass_reset_alter(&$form, &$form_state) {
+  array_unshift($form['#validate'], 'ldap_user_grab_password_validate');
+}
+
+/**
  * store password from logon forms in ldap_user_ldap_provision_pwd static variable
  * for use in provisioning to ldap
  */
@@ -763,10 +772,8 @@ function ldap_user_provision_to_drupal($ldap_user, $user_edit = array()) {
  *   and protect unencrypted user password from other modules
  *
  *   @param enum string $action 'get' | 'set'
- *   @param string | FALE $value as user entered password
+ *   @param string | FALSE $value as user entered password
  */
-
-
 function ldap_user_ldap_provision_pwd($action, $value = NULL, $reset = FALSE) {
 
   //$calling_function = FALSE;
