<?php
/*
 * Copyright (C) 2016 bartgysens
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * REQUIRED MODULE: Smartschool Sync module -> synchronisation with Afwezigheden through API activated!
 */

/* Drupal Hooks */

/**
 * Implements argus_afwezigheden_menu().
 */
function argus_afwezigheden_menu() {
	if (menu_load ( 'menu-modules' )) {
		$menu = 'menu-modules';
	} else {
		$menu = 'navigation';
	}
	
	$items = array ();
	$items ['admin/config/argus/afwezigheden'] = array (
			'title' => 'Afwezigheden',
			'description' => 'Stel de parameters op waarmee je de afwezigheden en telaatkomers beheert.',
			'page callback' => 'drupal_get_form',
			'page arguments' => array (
					'argus_afwezigheden_setup_form' 
			),
			'access arguments' => array (
					'access administration pages' 
			),
			'type' => MENU_NORMAL_ITEM,
			'weight' => 1 
	);
	
	$items ['afwezigheden'] = array (
			'title' => t ( 'Afwezigheden' ),
			'description' => 'Overzicht van de afwezigheden per leerling.',
			'page callback' => 'argus_afwezigheden_overview',
			'access arguments' => array (
					'access argus_absences_overview content' 
			),
			'menu_name' => $menu 
	);
	$items ['afwezigheden-bcodes'] = array (
			'title' => t ( 'Status B-codes' ),
			'description' => 'Controlelijst van de B-codes.',
			'page callback' => 'drupal_get_form',
			'page arguments' => array (
					'argus_afwezigheden_bcodes_form' 
			),
			'access arguments' => array (
					'access argus_absences_bcodes content' 
			),
			'menu_name' => $menu 
	);
	$items ['afwezigheden-omzetting'] = array (
			'title' => t ( 'Wettiging afwezigheden' ),
			'description' => 'Controlelijst om afwezigheden te wettigen.',
			'page callback' => 'argus_afwezigheden_justification',
			'access arguments' => array (
					'access argus_absences_justify content' 
			),
			'menu_name' => $menu 
	);
	$items ['telaatkomers'] = array (
			'title' => t ( 'Telaatkomers' ),
			'description' => 'Controlelijst om het te laat komen te beheren.',
			'page callback' => 'argus_afwezigheden_latecomers',
			'access arguments' => array (
					'access argus_absences_latecomers content' 
			),
			'menu_name' => $menu 
	);
	$items ['telaatkomers-wettiging.create'] = array (
			'page callback' => 'argus_afwezigheden_latecomers_rectification_create',
			'access arguments' => array (
					'access argus_absences_latecomers content' 
			),
			'type' => MENU_CALLBACK
	);
	$items ['telaatkomers-wettiging.delete'] = array (
			'page callback' => 'argus_afwezigheden_latecomers_rectification_delete',
			'page arguments' => array( 1 ),
			'access arguments' => array (
					'access argus_absences_latecomers content' 
			),
			'type' => MENU_CALLBACK
	);
	return $items;
}

/**
 * Implements hook_permission().
 */
function argus_afwezigheden_permission() {
	return array (
			'access argus_absences_overview content' => array (
					'title' => t ( 'Overzicht bekijken van de afwezigheden per leerling' ) 
			),
			'access argus_absences_bcodes content' => array (
					'title' => t ( 'Controlelijst B-codes bekijken' ) 
			),
			'access argus_absences_justify content' => array (
					'title' => t ( 'Afwezigheden wettigen' ) 
			),
			'access argus_absences_latecomers content' => array (
					'title' => t ( 'Te laat komen beheren' ) 
			) 
	);
}

/**
 * Page callback: Afwezigheden instellingen
 *
 * @see argus_buscheck_setup_form()
 */
function argus_afwezigheden_setup_form($form, &$form_state) {
	$form ['argus_afwezigheden_latecomers_justification_reasons'] = array (
			'#type' => 'textarea',
			'#title' => t ( 'Telaakomers - geldige wettigingen' ),
			'#default_value' => variable_get ( 'argus_afwezigheden_latecomers_justification_reasons', NULL ),
			'#cols' => 70,
			'#rows' => 10,
			'#description' => t ( 'Voeg de geldige redenen toe waarmee je een telaatkomer kan wettigen. Geef één waarde per regel.' ) 
	);
	return system_settings_form ( $form );
}

/**
 * Implement hook_theme()
 */
function argus_afwezigheden_theme() {
	return array (
			'overview' => array (
					'template' => 'templates/argus_afwezigheden--overview' 
			),
			'absences_filter_block' => array (
					'variables' => array (
							'content' => NULL,
							'popular_content' => NULL 
					),
					'template' => 'templates/argus_afwezigheden--absences--filter_block' 
			),
			'justification' => array (
					'template' => 'templates/argus_afwezigheden--justification' 
			),
			'latecomers' => array (
					'template' => 'templates/argus_afwezigheden--latecomers' 
			),
			'latecomers_filter_block' => array (
					'variables' => array (
							'content' => NULL,
							'popular_content' => NULL 
					),
					'template' => 'templates/argus_afwezigheden--latecomers--filter_block' 
			),
			'latecomers_infoscreen_block' => array (
					'template' => 'templates/argus_afwezigheden--latecomers--infoscreen_block' 
			) 
	);
}

/**
 * Implement hook_block_info().
 */
function argus_afwezigheden_block_info() {
	$blocks = array (
			'absences_filter_block' => array (
					'info' => t ( 'Afwezigheden: filter' ),
					'cache' => DRUPAL_CACHE_GLOBAL,
					'weight' => - 10,
					'status' => 1,
					'region' => 'sidebar_first',
					'visibility' => BLOCK_VISIBILITY_LISTED,
					'pages' => 'afwezigheden' . chr ( 13 ) . 'afwezigheden/*' 
			),
			'latecomers_filter_block' => array (
					'info' => t ( 'Telaatkomers: filter' ),
					'cache' => DRUPAL_CACHE_GLOBAL,
					'weight' => - 10,
					'status' => 1,
					'region' => 'sidebar_first',
					'visibility' => BLOCK_VISIBILITY_LISTED,
					'pages' => 'telaatkomers' . chr ( 13 ) . 'telaatkomers/*' 
			),
			'latecomers_infoscreen_block' => array (
					'info' => t ( 'Telaatkomers: infoscherm' ),
					'cache' => DRUPAL_CACHE_GLOBAL,
					'weight' => 10,
					'status' => 1,
					'region' => 'sidebar_first',
					'visibility' => BLOCK_VISIBILITY_LISTED,
					'pages' => '<front>' 
			) 
	);
	
	return $blocks;
}

/**
 * Implement hook_block_view().
 */
function argus_afwezigheden_block_view($delta = '') {
	$block = array ();
	$variables = array ();
	switch ($delta) {
		case 'absences_filter_block' :
			$block ['subject'] = 'Filter';
			$block ['content'] = theme ( 'absences_filter_block', $variables );
			drupal_add_js ( drupal_get_path ( 'module', 'jquery_update' ) . '/replace/ui/ui/jquery.ui.datepicker.js' );
			drupal_add_js ( drupal_get_path ( 'module', 'argus_afwezigheden' ) . '/js/argus_afwezigheden.js' );
			break;
		case 'latecomers_filter_block' :
			$block ['subject'] = 'Filter';
			$block ['content'] = theme ( 'latecomers_filter_block', $variables );
			break;
		case 'latecomers_infoscreen_block' :
			$block ['subject'] = 'Telaatkomers';
			$block ['content'] = theme ( 'latecomers_infoscreen_block' );
			break;
	}
	return $block;
}

/**
 * Page callback: Overzicht van de afwezigheden
 *
 * @return array
 */
function argus_afwezigheden_overview($day = NULL, $uid = NULL) {
	drupal_add_css ( drupal_get_path ( 'module', 'argus_afwezigheden' ) . '/css/argus_afwezigheden.css' );
	
	/* Get absences for selected day */
	$day = new DateTime ( $day );
	
	/*
	 * Fetch all absences and calculate totals
	 */
	$codes_ok = array (
			'D',
			'Z',
			'G',
			'T',
			'C',
			'H',
			'R',
			'O',
			'Q',
			'P',
			'J' 
	);
	$codes_nok = array (
			'B',
			'-',
			NULL 
	);
	
	$query = 'SELECT a.leerling, a.leerling FROM {argus_lvs_afwezigheden} AS a INNER JOIN users AS u ON u.uid = a.leerling WHERE a.am IN (:codes) AND u.status = 1 AND DATE_FORMAT(a.datum,\'%Y-%m-%d\') = :day ';
	if (is_numeric ( $uid ))
		$query .= ' AND a.leerling = ' . $uid;
	$result = db_query ( $query, array (
			':codes' => $codes_ok,
			':day' => $day->format ( 'Y-m-d' ) 
	) );
	$usersAM_ok = $result->fetchAllKeyed ();
	$result = db_query ( $query, array (
			':codes' => $codes_nok,
			':day' => $day->format ( 'Y-m-d' ) 
	) );
	$usersAM_nok = $result->fetchAllKeyed ();
	
	$query = 'SELECT a.leerling, a.leerling FROM {argus_lvs_afwezigheden} AS a INNER JOIN users AS u ON u.uid = a.leerling WHERE a.pm IN (:codes) AND u.status = 1 AND DATE_FORMAT(a.datum,\'%Y-%m-%d\') = :day ';
	if (is_numeric ( $uid ))
		$query .= ' AND a.leerling = ' . $uid;
	$result = db_query ( $query, array (
			':codes' => $codes_ok,
			':day' => $day->format ( 'Y-m-d' ) 
	) );
	$usersPM_ok = $result->fetchAllKeyed ();
	$result = db_query ( $query, array (
			':codes' => $codes_nok,
			':day' => $day->format ( 'Y-m-d' ) 
	) );
	$usersPM_nok = $result->fetchAllKeyed ();
	
	$userDates = array ();
	foreach ( $usersAM_ok as $u ) {
		if (! array_key_exists ( $u, $userDates )) {
			$fullname = argus_get_user_realname ( $u );
			$userDates [strtoupper ( $fullname )] = array (
					'id' => $u,
					'name' => $fullname,
					'class' => argus_klasbeheer_get_user_class ( $u, 'title' ),
					'am' => array (
							'ok' => false,
							'nok' => false 
					),
					'pm' => array (
							'ok' => false,
							'nok' => false 
					) 
			);
		}
		$userDates [strtoupper ( $fullname )] ['am'] ['ok'] = 'x';
	}
	foreach ( $usersAM_nok as $u ) {
		if (! array_key_exists ( $u, $userDates )) {
			$fullname = argus_get_user_realname ( $u );
			$userDates [strtoupper ( $fullname )] = array (
					'id' => $u,
					'name' => $fullname,
					'class' => argus_klasbeheer_get_user_class ( $u, 'title' ),
					'am' => array (
							'ok' => false,
							'nok' => false 
					),
					'pm' => array (
							'ok' => false,
							'nok' => false 
					) 
			);
		}
		$userDates [strtoupper ( $fullname )] ['am'] ['nok'] = 'x';
	}
	foreach ( $usersPM_ok as $u ) {
		if (! array_key_exists ( $u, $userDates )) {
			$fullname = argus_get_user_realname ( $u, 'title' );
			$userDates [strtoupper ( $fullname )] = array (
					'id' => $u,
					'name' => $fullname,
					'class' => argus_klasbeheer_get_user_class ( $u, 'title' ),
					'am' => array (
							'ok' => false,
							'nok' => false 
					),
					'pm' => array (
							'ok' => false,
							'nok' => false 
					) 
			);
		}
		$userDates [strtoupper ( $fullname )] ['pm'] ['ok'] = 'x';
	}
	foreach ( $usersPM_nok as $u ) {
		if (! array_key_exists ( $u, $userDates )) {
			$fullname = argus_get_user_realname ( $u );
			$userDates [strtoupper ( $fullname )] = array (
					'id' => $u,
					'name' => $fullname,
					'class' => argus_klasbeheer_get_user_class ( $u, 'title' ),
					'am' => array (
							'ok' => false,
							'nok' => false 
					),
					'pm' => array (
							'ok' => false,
							'nok' => false 
					) 
			);
		}
		$userDates [strtoupper ( $fullname )] ['pm'] ['nok'] = 'x';
	}
	
	ksort ( $userDates );
	
	return theme ( 'overview', array (
			's' => $day,
			'data' => $userDates 
	) );
}

/**
 * Page callback: Controlelijst status B-codes form
 *
 * @see argus_afwezigheden_form()
 */
function argus_afwezigheden_bcodes_form($form, &$form_state) {
	global $base_url;
	
	/* Filter data only for this schoolyear (active schoolyear) */
	$schoolyear = ( array ) argus_schoolyear ( 0 );
	
	drupal_add_css ( drupal_get_path ( 'module', 'argus_afwezigheden' ) . '/css/argus_afwezigheden.css' );
	
	$form ['argus_afwezigheden_problems'] = array (
			'#type' => 'checkbox',
			'#title' => t ( 'Problematische afwezigheden tonen (+30 B-codes)' ),
			'#description' => t ( 'Als een leerling meer dan 30 B-codes heeft, krijgt hij de status "problematisch". Dit heeft als gevolg dat de leerling wordt gemeld aan Brussel.' ),
			'#default_value' => 1 
	);
	$form ['argus_afwezigheden_cel'] = array (
			'#type' => 'checkbox',
			'#title' => t ( 'Te bespreken op de cel (+5 B-codes)' ),
			'#description' => t ( 'Als een leerling meer dan 5 B-codes heeft, wordt hij besproken op de cel Overleg met CLB.' ),
			'#default_value' => 1 
	);
	$form ['argus_afwezigheden_submit'] = array (
			'#type' => 'submit',
			'#value' => t ( 'Lijst opvragen' ) 
	);
	
	/*
	 * Retrieve latest update information voor 'afwezigheden'
	 */
	if (db_table_exists ( 'watchdog' )) {
		$query = 'SELECT timestamp ' . 'FROM {watchdog} AS w ' . 'WHERE w.type = :type AND w.message LIKE :message ' . 'ORDER BY timestamp DESC';
		$result = db_query ( $query, array (
				':type' => 'argus',
				':message' => '%afwezigheden%' 
		) );
		$lastUpdate = $result->fetch ();
		if ($lastUpdate) {
			$form ['#prefix'] = '<div id="lastUpdate">Laatste update uitgevoerd op <strong>' . date ( 'd/m/y', $lastUpdate->timestamp ) . '</strong> om <strong>' . date ( 'H:i', $lastUpdate->timestamp ) . '</strong></div>';
		} else {
			$form ['#prefix'] = '<div id="lastUpdate" style="color: red;"><u>Opgelet</u>: deze gegevens werden reeds enige tijd niet meer bijgewerkt.</div>';
		}
	} else {
		$form ['#prefix'] = '';
	}
	
	/*
	 * Process request for results consulting the Afwezigheden
	 */
	$form ['#suffix'] = '<div id="argus_afwezigheden_results">';
	
	/*
	 * Fetch all absences and calculate totals
	 */
	$query = 'SELECT leerling, COUNT(am) AS total FROM {argus_lvs_afwezigheden} WHERE am=\'B\' AND datum BETWEEN :startdate AND :enddate GROUP BY leerling ORDER BY total DESC';
	$result = db_query ( $query, array (
			':startdate' => $schoolyear ['start'],
			':enddate' => $schoolyear ['end'] 
	) );
	$usersAM = $result->fetchAll ();
	
	$query = 'SELECT leerling, COUNT(pm) AS total FROM {argus_lvs_afwezigheden} WHERE pm=\'B\' AND datum BETWEEN :startdate AND :enddate GROUP BY leerling ORDER BY total DESC';
	$result = db_query ( $query, array (
			':startdate' => $schoolyear ['start'],
			':enddate' => $schoolyear ['end'] 
	) );
	$usersPM = $result->fetchAll ();
	
	$usersTotals = array ();
	foreach ( $usersAM as $u ) {
		$user = user_load ( $u->leerling );
		if (isset ( $user->status )) {
			if (isset ( $user->status )) {
				$usersTotals [$u->leerling] = $u->total;
			}
		}
	}
	foreach ( $usersPM as $u ) {
		$user = user_load ( $u->leerling );
		if (isset ( $user->status )) {
			if ($user->status) {
				if (isset ( $usersTotals [$u->leerling] )) {
					$usersTotals [$u->leerling] += $u->total;
				} else {
					$usersTotals [$u->leerling] = $u->total;
				}
			}
		}
	}
	arsort ( $usersTotals );
	
	if (isset ( $form_state ['values'] )) {
		/*
		 * Show all problematic absences (+30 B-codes)
		 */
		if ($form_state ['values'] ['argus_afwezigheden_problems']) {
			$form ['#suffix'] .= '<hr />+30 B-codes<hr /><ol>';
			foreach ( $usersTotals as $uid => $total ) {
				if ($total < 31)
					break;
				$u = user_load ( $uid );
				
				$query = 'SELECT c.title AS title FROM {node} AS c LEFT JOIN {field_data_field_klas_leerlingen} AS l ON c.nid = l.entity_id WHERE l.field_klas_leerlingen_target_id = :uid';
				$result = db_query ( $query, array (
						':uid' => $uid 
				) );
				$class = $result->fetchAll ();
				
				$form ['#suffix'] .= '<li>' . argus_engine_get_user_link ( $uid, null, null, true ) . ' : <span style="color: red;">' . $total . '</span></li>';
			}
			$form ['#suffix'] .= '</ol>';
		}
		/*
		 * Show all users for the cel (+5 B-codes)
		 */
		if ($form_state ['values'] ['argus_afwezigheden_cel']) {
			$form ['#suffix'] .= '<hr />+5 B-codes<hr /><ol>';
			foreach ( $usersTotals as $uid => $total ) {
				if ($total < 6)
					break;
				if ($total < 31) {
					$u = user_load ( $uid );
					
					$query = 'SELECT c.title AS title FROM {node} AS c LEFT JOIN {field_data_field_klas_leerlingen} AS l ON c.nid = l.entity_id WHERE l.field_klas_leerlingen_target_id = :uid';
					$result = db_query ( $query, array (
							':uid' => $uid 
					) );
					$class = $result->fetchAll ();
					
					$form ['#suffix'] .= '<li>' . argus_engine_get_user_link ( $uid, null, null, true ) . ' : <span style="color: red;">' . $total . '</span></li>';
				}
			}
			$form ['#suffix'] .= '</ol>';
		}
	}
	
	$form ['#suffix'] .= '</div>';
	
	return $form;
}

/**
 * Form callback: Controlelijst B-codes working form after submission
 *
 * @see argus_afwezigheden_form()
 */
function argus_afwezigheden_bcodes_form_submit($form, &$form_state) {
	$form_state ['rebuild'] = TRUE;
}

/**
 * Page callback: Controlelijst justification absences
 *
 * @return array
 */
function argus_afwezigheden_justification($uid = NULL) {
	/* Filter data only for this schoolyear (active schoolyear) */
	$schoolyear = ( array ) argus_schoolyear ( 0 );
	
	if ($cache = cache_get ( 'argus_afwezigheden_justification_' . $uid . '_' . $schoolyear ['start'] )) {
		$userDates = $cache->data;
	} else {
		/*
		 * Fetch all absences and calculate totals
		 */
		$query = 'SELECT leerling, datum FROM {argus_lvs_afwezigheden} WHERE am=\'-\' AND datum BETWEEN :startdate AND :enddate ';
		if (is_numeric ( $uid ))
			$query .= ' AND leerling = ' . $uid;
		$result = db_query ( $query, array (
				':startdate' => $schoolyear ['start'],
				':enddate' => $schoolyear ['end'] 
		) );
		$usersAM = $result->fetchAll ();
		
		$query = 'SELECT leerling, datum FROM {argus_lvs_afwezigheden} WHERE pm=\'-\' AND datum BETWEEN :startdate AND :enddate ';
		if (is_numeric ( $uid ))
			$query .= ' AND leerling = ' . $uid;
		$result = db_query ( $query, array (
				':startdate' => $schoolyear ['start'],
				':enddate' => $schoolyear ['end'] 
		) );
		$usersPM = $result->fetchAll ();
		
		$userDates = array ();
		foreach ( $usersAM as $u ) {
			$user = user_load ( $u->leerling );
			if ($user) {
				if ($user->status) {
					$fullname = field_get_items ( 'user', $user, 'field_user_sms_naam' ) [0] ['value'] . ', ' . field_get_items ( 'user', $user, 'field_user_sms_voornaam' ) [0] ['value'];
					$userDates [$fullname] ['id'] = $u->leerling;
					$userDates [$fullname] ['username'] = $user->name;
					
					$query = 'SELECT datum FROM {argus_lvs_afwezigheden} WHERE (am=\'|\' OR am=\'|\') AND leerling = :uid AND datum > :date ORDER BY datum ASC';
					$result = db_query ( $query, array (
							':uid' => $u->leerling,
							':date' => $u->datum 
					) );
					$userBack = $result->fetch ();
					if ($userBack) {
						$userDates [$fullname] ['back'] = $userBack->datum;
						$diff = date_diff ( date_create ( $userBack->datum ), date_create () )->days;
						$userDates [$fullname] ['dates'] [$u->datum] ['diff'] = $diff - (ceil ( $diff / 7 ) * 2);
						if ($userDates [$fullname] ['dates'] [$u->datum] ['diff'] < 0) {
							$userDates [$fullname] ['dates'] [$u->datum] ['diff'] = 0;
						}
					}
					
					$userDates [$fullname] ['dates'] [$u->datum] ['am'] = TRUE;
				}
			}
		}
		foreach ( $usersPM as $u ) {
			$user = user_load ( $u->leerling );
			if ($user->status) {
				$fullname = field_get_items ( 'user', $user, 'field_user_sms_naam' ) [0] ['value'] . ', ' . field_get_items ( 'user', $user, 'field_user_sms_voornaam' ) [0] ['value'];
				$userDates [$fullname] ['id'] = $u->leerling;
				$userDates [$fullname] ['username'] = $user->name;
				
				$query = 'SELECT datum FROM {argus_lvs_afwezigheden} WHERE (am=\'|\' OR am=\'|\') AND leerling = :uid AND datum > :date ORDER BY datum ASC';
				$result = db_query ( $query, array (
						':uid' => $u->leerling,
						':date' => $u->datum 
				) );
				$userBack = $result->fetch ();
				if ($userBack) {
					$userDates [$fullname] ['back'] = $userBack->datum;
					$diff = date_diff ( date_create ( $userBack->datum ), date_create () )->days;
					$userDates [$fullname] ['dates'] [$u->datum] ['diff'] = $diff - (ceil ( $diff / 7 ) * 2);
					if ($userDates [$fullname] ['dates'] [$u->datum] ['diff'] < 0) {
						$userDates [$fullname] ['dates'] [$u->datum] ['diff'] = 0;
					}
				}
				
				$userDates [$fullname] ['dates'] [$u->datum] ['pm'] = TRUE;
			}
		}
		ksort ( $userDates );
		
		cache_set ( 'argus_afwezigheden_justification_' . $uid . '_' . $schoolyear ['start'], $userDates );
	}
	
	if (is_numeric ( $uid )) {
		return $userDates;
	} else {
		return theme ( 'justification', array (
				'data' => $userDates 
		) );
	}
}

/**
 * Page callback: Controlelijst latecomers absences
 *
 * @return array
 */
function argus_afwezigheden_latecomers($uid = null) {
	/* Filter data only for this schoolyear (active schoolyear) */
	$schoolyear = ( array ) argus_schoolyear ( 0 );
	
	/*
	 * Fetch all latecomings and calculate totals
	 */
	$query = 'SELECT id, leerling, datum ';
	$query .= 'FROM {argus_lvs_afwezigheden} ';
	$query .= 'INNER JOIN {field_data_field_user_sms_naam} AS un ON un.entity_id = leerling ';
	$query .= 'INNER JOIN {field_data_field_user_sms_voornaam} AS uv ON uv.entity_id = leerling ';
	$query .= 'RIGHT JOIN {field_data_field_klas_leerlingen} AS k ON k.field_klas_leerlingen_target_id = leerling ';
	$query .= 'WHERE (am=\'L\' OR pm=\'L\') ';
	$query .= 'AND datum BETWEEN :startdate AND :enddate ';
	$params = array (
			':startdate' => $schoolyear ['start'],
			':enddate' => $schoolyear ['end'] 
	);
	
	if (is_numeric ( $uid )) {
		$query .= 'AND leerling=:uid ';
		$params [':uid'] = $uid;
	} elseif (isset ( $_GET )) {
		if (array_key_exists ( 'uid', $_GET )) {
			if (is_numeric ( $_GET ['uid'] )) {
				$query .= 'AND leerling=:uid ';
				$params [':uid'] = $_GET ['uid'];
			}
		}
	}
	
	if (isset ( $_GET )) {
		if (array_key_exists ( 'cid', $_GET )) {
			if (is_numeric ( $_GET ['cid'] )) {
				$query .= 'AND k.entity_id=:cid ';
				$params [':cid'] = $_GET ['cid'];
			}
		}
	}
	
	$query .= 'ORDER BY un.field_user_sms_naam_value ASC, uv.field_user_sms_voornaam_value ASC, datum DESC';
	$dates_late = db_query ( $query, $params )->fetchAll ();
	
	$userDates = array ();
	foreach ( $dates_late as $d ) {
		if (! array_key_exists ( $d->leerling, $userDates )) {
			$userDates [$d->leerling] = array (
					0 => array (),
					1 => array () 
			);
		}
		$query = 'SELECT id FROM {argus_lvs_latecomers_rectified} WHERE date_late = :date';
		$userDates [$d->leerling] [db_query ( $query, array (
				':date' => $d->id 
		) )->rowCount ()] [$d->id] = $d->datum;
	}
	
	drupal_add_css ( drupal_get_path ( 'module', 'argus_afwezigheden' ) . '/css/argus_afwezigheden_latecomers.css' );
	drupal_add_library ( 'system', 'ui.datepicker' );
	drupal_add_js ( drupal_get_path ( 'module', 'argus_afwezigheden' ) . '/js/argus_afwezigheden_latecomers.js' );
	
	if (is_numeric ( $uid )) {
		return $userDates;
	} else {
		return theme ( 'latecomers', array (
				'data' => $userDates 
		) );
	}
}

/**
 * Custom module functionality
 */

/**
 * Create rectification.
 *
 */
function argus_afwezigheden_latecomers_rectification_create() {
	if (isset($_POST['did'])){
			$did = $_POST['did'];
			$reason = $_POST['reason'];
	}
	if ($did) {
		$query = 'INSERT INTO {argus_lvs_latecomers_rectified} (date_late, reason) VALUES (:did, :reason)';
		$result = db_query ( $query, array (
				':did' => $did,
				':reason' => $reason,
		) );
	} else {
		// Somethin' happend what wasn't cosher -> watchDog
		watchdog ( 'argus', 'Misbruik van de wettiging van telaatkomers geconstateerd', array (), WATCHDOG_EMERGENCY );
	}
	exit ();
}

/**
 * Delete rectification.
 */
function argus_afwezigheden_latecomers_rectification_delete($did) {
	if ($did) {
		$query = 'DELETE FROM {argus_lvs_latecomers_rectified} WHERE date_late = :did';
		$result = db_query ( $query, array (
				':did' => $did 
		) );
	} else {
		// Somethin' happend what wasn't cosher -> watchDog
		watchdog ( 'argus', 'Misbruik van de wettiging van telaatkomers geconstateerd', array (), WATCHDOG_EMERGENCY );
	}
	exit ();
}