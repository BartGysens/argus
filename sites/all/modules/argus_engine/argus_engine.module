<?php
/*
 * Copyright (C) 2014 bartgysens
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

/* Drupal Hooks */

/**
 * Implements hook_modules_enabled().
 * Handling cache for argus_...-modules
 */
function argus_engine_modules_enabled($modules) {
	argus_engine_cache_clear ( 'module' );
}

/**
 * Implements hook_engine_user_role_presave().
 * Handling cache for argus_...-modules
 */
function argus_engine_user_role_presave($user_role) {
	argus_engine_cache_clear ();
}

/**
 * Implements hook_engine_user_role_delete().
 * Handling cache for argus_...-modules
 */
function argus_engine_user_role_delete($user_role) {
	argus_engine_cache_clear ();
}

/**
 * Implements hook_engine_user_presave().
 * Handling cache for argus_...-modules
 */
function argus_engine_user_presave($user) {
	argus_engine_cache_clear ();
}

/**
 * Implements hook_engine_user_delete().
 * Handling cache for argus_...-modules
 */
function argus_engine_user_delete($user) {
	argus_engine_cache_clear ();
}

/**
 * Implements hook_engine_node_presave().
 * Handling cache for argus_...-modules
 */
function argus_engine_node_presave($node) {
	argus_engine_cache_clear ( 'node' );
}

/**
 * Implements hook_engine_node_delete().
 * Handling cache for argus_...-modules
 */
function argus_engine_node_delete($node) {
	argus_engine_cache_clear ( 'node' );
}

/**
 * Implements argus_engine_menu().
 */
function argus_engine_menu() {
	$items = array ();
	$items ['admin/config/argus'] = array (
			'title' => 'argus - a Quality Controle extension',
			'description' => 'Alle instellingen met betrekking tot argus.',
			'position' => 'left',
			'weight' => - 9999,
			'page callback' => 'system_admin_menu_block_page',
			'access arguments' => array (
					'administer site configuration' 
			),
			'file' => 'system.admin.inc',
			'file path' => drupal_get_path ( 'module', 'system' ) 
	);
	$items ['admin/config/argus/engine'] = array (
			'title' => 'Algemene instellingen',
			'description' => 'Instellingen die globaal in het argus-platform worden gebruikt.',
			'page callback' => 'drupal_get_form',
			'page arguments' => array (
					'argus_engine_form' 
			),
			'access arguments' => array (
					'administer site configuration' 
			),
			'type' => MENU_NORMAL_ITEM,
			'weight' => 1 
	);
	$items ['admin/config/argus/export_variables'] = array (
			'title' => 'Exporteer variabelen',
			'description' => 'Om een installatieprofiel aan te maken, kan je de ingestelde variabelen exporteren om in je *.install op te nemen.',
			'page callback' => 'argus_engine_export_variables',
			'access arguments' => array (
					'administer site configuration' 
			),
			'type' => MENU_NORMAL_ITEM,
			'weight' => 1 
	);
	return $items;
}

/**
 * Page callback: argus instellingen
 *
 * @see argus_engine_menu()
 */
function argus_engine_form($form, &$form_state) {
	
	/* PERIODEN */
	$form ['periods'] = array (
			'#type' => 'fieldset',
			'#title' => t ( 'Periodes definiëren' ),
			'#collapsible' => TRUE,
			'#collapsed' => TRUE 
	);
	
	for($x = 1; $x < 11; $x ++) {
		$form ['periods'] [$x] = array (
				'#type' => 'fieldset',
				'#title' => t ( 'Periode ' . $x ),
				'#collapsible' => TRUE,
				'#collapsed' => TRUE 
		);
		
		$form ['periods'] [$x] ['period_' . $x . '_shortname'] = array (
				'#type' => 'textfield',
				'#title' => t ( 'Afkorting' ),
				'#default_value' => variable_get ( 'period_' . $x . '_shortname', NULL ),
				'#description' => t ( 'Geef de korte naam op die gebruikt wordt om deze periode te benoemen.' ),
				'#size' => 10 
		);
		
		$form ['periods'] [$x] ['period_' . $x . '_fullname'] = array (
				'#type' => 'textfield',
				'#title' => t ( 'Volledige benaming' ),
				'#default_value' => variable_get ( 'period_' . $x . '_fullname', NULL ),
				'#description' => t ( 'Geef de volledige naam op die gebruikt wordt om deze periode te benoemen.' ),
				'#size' => 100 
		);
		
		$form ['periods'] [$x] ['period_' . $x . '_type'] = array (
				'#type' => 'select',
				'#title' => t ( 'Type' ),
				'#options' => array (
						0 => '-',
						'dagelijks werk' => 'dagelijks werk',
						'examen' => 'examen',
						'geïntegreerde werkperiode' => 'geïntegreerde werkperiode',
						'permanente evalutie' => 'permanente evalutie' 
				),
				'#default_value' => variable_get ( 'period_' . $x . '_type', NULL ),
				'#description' => t ( 'Geef aan over welk soort periode het gaat, dit is nodig voor het opmaken van lijsten.' ) 
		);
		
		$form ['periods'] [$x] ['period_' . $x . '_startdate'] = array (
				'#type' => 'date_popup',
				'#date_format' => 'd/m/Y',
				'#title' => t ( 'Startdatum' ),
				'#default_value' => variable_get ( 'period_' . $x . '_startdate', NULL ),
				'#description' => t ( 'Geef de datum op wanneer deze periode start.' ) 
		);
		
		$form ['periods'] [$x] ['period_' . $x . '_enddate'] = array (
				'#type' => 'date_popup',
				'#date_format' => 'd/m/Y',
				'#title' => t ( 'Einddatum' ),
				'#default_value' => variable_get ( 'period_' . $x . '_enddate', NULL ),
				'#description' => t ( 'Geef de datum op tot wanneer deze periode loopt.' ) 
		);
	}
	
	/* ROLLEN */
	
	$form ['roles'] = array (
			'#type' => 'fieldset',
			'#title' => t ( 'Instellen van de rollen' ),
			'#collapsible' => TRUE,
			'#collapsed' => TRUE 
	);
	
	/*
	 * Teacher (leerkracht)
	 */
	$form ['roles'] ['argus_engine_roles_teacher'] = array (
			'#type' => 'select',
			'#title' => t ( 'Leerkracht' ),
			'#multiple' => true,
			'#options' => user_roles ( $membersOnly = true ),
			'#default_value' => variable_get ( 'argus_engine_roles_teacher', NULL ),
			'#description' => t ( 'Selecteer de overeenstemmende rol voor <em>leerkracht</em>.' ) 
	);
	
	/*
	 * Pupil/student (leerling)
	 */
	$form ['roles'] ['argus_engine_roles_pupil'] = array (
			'#type' => 'select',
			'#title' => t ( 'Leerling' ),
			'#multiple' => true,
			'#options' => user_roles ( $membersOnly = true ),
			'#default_value' => variable_get ( 'argus_engine_roles_pupil', NULL ),
			'#description' => t ( 'Selecteer de overeenstemmende rol voor <em>leerling</em>.' ) 
	);
	
	/*
	 * Staff (directie)
	 */
	$form ['roles'] ['argus_engine_roles_staff'] = array (
			'#type' => 'select',
			'#title' => t ( 'Directie' ),
			'#multiple' => true,
			'#options' => user_roles ( $membersOnly = true ),
			'#default_value' => variable_get ( 'argus_engine_roles_staff', NULL ),
			'#description' => t ( 'Selecteer de overeenstemmende rol voor <em>directie</em>.' ) 
	);
	
	/*
	 * Classteacher (KTT/Hulp-KTT)
	 */
	$form ['roles'] ['argus_engine_roles_ktt'] = array (
			'#type' => 'select',
			'#title' => t ( 'Klastitularis & hulpklastitularis' ),
			'#multiple' => true,
			'#options' => user_roles ( $membersOnly = true ),
			'#default_value' => variable_get ( 'argus_engine_roles_ktt', NULL ),
			'#description' => t ( 'Selecteer de overeenstemmende rol voor <em>klastitularis & hulp-KTT</em>.' ) 
	);
	
	/*
	 * Pupil support (ILB - Interne leerlingenbegeleiding)
	 */
	$form ['roles'] ['argus_engine_roles_ilb'] = array (
			'#type' => 'select',
			'#title' => t ( 'Interne leerlingenbegeleiding' ),
			'#multiple' => true,
			'#options' => user_roles ( $membersOnly = true ),
			'#default_value' => variable_get ( 'argus_engine_roles_ilb', NULL ),
			'#description' => t ( 'Selecteer de overeenstemmende rol voor <em>interne leerlingenbegeleiding</em>.' ) 
	);
	
	/*
	 * Workers (Alle personeelsleden)
	 */
	$form ['roles'] ['argus_engine_roles_workers'] = array (
			'#type' => 'select',
			'#title' => t ( 'Personeelsleden' ),
			'#multiple' => true,
			'#options' => user_roles ( $membersOnly = true ),
			'#default_value' => variable_get ( 'argus_engine_roles_workers', NULL ),
			'#description' => t ( 'Selecteer de overeenstemmende rol(len) voor <em>alle personeelsleden</em>.' ) 
	);
	
	/*
	 * Initiate demo-mode (usernames will be converted into fictional names)
	 */
	$form ['argus_engine_demo_mode'] = array (
			'#type' => 'checkbox',
			'#title' => t ( 'Demonstratie modus' ),
			'#default_value' => variable_get ( 'argus_engine_demo_mode' ),
			'#description' => t ( 'Stel argus in op demonstratie modus. De gebruikersnamen worden omgezet in fictieve namen.' ) 
	);
	return system_settings_form ( $form );
}

/**
 * Menu callback to export variables
 */
function argus_engine_export_variables() {
	// Fetch and export variables from the database.
	$query = db_select ( 'variable' );
	$query->fields ( 'variable' );
	$query->orderBy ( 'name' );
	$result = $query->execute ();
	
	// Write variables to file
	$data = array ();
	
	$data [] = '<?php';
	$data [] = '/**';
	$data [] = ' * Export variables for import with install profile scripts';
	$data [] = ' */';
	$data [] = 'function argus_import_variables(){';
	$data [] = chr ( 9 ) . '$variables = array();' . chr ( 13 );
	foreach ( $result as $row ) {
		$data [] = chr ( 9 ) . '$variables[] = array( "variable" => "' . $row->name . '", "value" => ' . var_export ( unserialize ( $row->value ), 1 ) . ' );';
	}
	$data [] = chr ( 13 ) . chr ( 9 ) . 'return $variables;';
	$data [] = '}';
	
	$filename = '/tmp/argus_variables.inc';
	$result = file_put_contents ( $filename, implode ( chr ( 13 ), $data ) );
	
	if ($result) {
		header ( 'Content-Description: File Transfer' );
		header ( 'Content-Type: application/octet-stream' );
		header ( 'Content-Disposition: attachment; filename="' . basename ( $filename ) . '"' );
		header ( 'Expires: 0' );
		header ( 'Cache-Control: must-revalidate' );
		header ( 'Pragma: public' );
		header ( 'Content-Length: ' . filesize ( $filename ) );
		readfile ( $filename );
		drupal_exit ();
	}
}

/* Supporting functions */

/**
 * Render field values
 *
 * @param type $ntype        	
 * @param type $entity        	
 * @param type $field        	
 * @param type $item        	
 * @return type
 */
function argus_render($ntype, $entity, $field, $item = 0) {
	$field = field_get_items ( $ntype, $entity, $field );
	if (is_array ( $field )) {
		if (array_key_exists ( $item, $field )) {
			if (array_key_exists ( 'safe_value', $field [$item] )) {
				return $field [$item] ['safe_value'];
			}
			if (array_key_exists ( 'value', $field [$item] )) {
				return $field [$item] ['value'];
			}
		}
	}
	return '';
}

/**
 * Retrieve the real name of a user.
 *
 * Function returns a string
 *
 * @param $uid User
 *        	id
 */
function argus_get_user_realname($uid) {
	if (isset ( $uid )) {
		$query = 'SELECT un.field_user_sms_naam_value AS naam, uv.field_user_sms_voornaam_value AS voornaam ';
		$query .= 'FROM {field_data_field_user_sms_naam} AS un ';
		$query .= 'INNER JOIN {field_data_field_user_sms_voornaam} AS uv ON uv.entity_id = un.entity_id ';
		$query .= 'WHERE un.entity_id = :uid';
		$user = db_query ( $query, array (
				':uid' => $uid 
		) )->fetchAll ();
		if (count ( $user ) > 0) {
			$user = $user [0];
			if (variable_get ( 'argus_engine_demo_mode' )) {
				$names = array (
						'A' => 'Achten',
						'B' => 'Buis',
						'C' => 'Charleston',
						'D' => 'Dremel',
						'E' => 'Everton',
						'F' => 'Franjes',
						'G' => 'Go',
						'H' => 'Hasselts',
						'I' => 'Indigo',
						'J' => 'Jenever',
						'K' => 'Kaars',
						'L' => 'Leef',
						'M' => 'Maan',
						'N' => 'Neverland',
						'O' => 'Overhand',
						'P' => 'Praats',
						'Q' => 'Quilt',
						'R' => 'Rock',
						'S' => 'Stepje',
						'T' => 'Toffe',
						'U' => 'Uytermaete',
						'V' => 'Varia',
						'W' => 'Werelds',
						'X' => 'Xena',
						'Y' => 'Yperkyneet',
						'Z' => 'Zonnekes' 
				);
				$key = strtoupper ( substr ( $user->naam, 0, 1 ) );
				if (key_exists ( $key, $names )) {
					$name = $names [$key];
				} else {
					$name = 'Anonymous';
				}
				return trim ( $name ) . ', ' . trim ( $user->voornaam );
			} else {
				return trim ( $user->naam ) . ', ' . trim ( $user->voornaam );
			}
		} else {
			if (variable_get ( 'argus_engine_demo_mode' )) {
				return 'x.y';
			} else {
				$u = user_load ( $uid );
				if ($u) {
					return $u->name;
				} else {
					return t ( 'Onbekend' );
				}
			}
		}
	} else {
		if (variable_get ( 'argus_engine_demo_mode' )) {
			return 'x.y';
		} else {
			$u = user_load ( $uid );
			if ($u) {
				return $u->name;
			} else {
				return t ( 'Onbekend' );
			}
		}
	}
}

/**
 * Retrieve the link for the user with his realname.
 *
 * Function returns a string (link)
 *
 * @param $uid integer
 *        	User id
 * @param $title string
 *        	Title/Alt of the link
 *        	default => realname
 * @param $target string
 *        	Target window (_blank, _self, ...)
 *        	default <none>
 * @param $classname boolean
 *        	Add classname (if in case) tot title
 *        	default false
 */
function argus_engine_get_user_link($uid, $title = null, $target = null, $classname = false) {
	if (isset ( $uid )) {
		if ($cache = cache_get ( 'argus_engine_get_user_link_' . $uid . '_' . $title . '_' . $target . '_' . $classname )) {
			$returnStr = $cache->data;
		} else {
			$returnStr = '<a href="' . base_path () . drupal_lookup_path ( 'alias', 'user/' . $uid ) . '"';
			
			if ($target) {
				$returnStr .= ' target="' . $target . '"';
			}
			
			$returnStr .= '>';
			
			if ($title) {
				$returnStr .= $title;
			} else {
				$returnStr .= argus_get_user_realname ( $uid );
			}
			
			if ($classname){
				$returnStr .= ' ('.argus_klasbeheer_get_user_class($uid, 'title') . ')';
			}
			
			$returnStr .= '</a>';
			
			cache_set ( 'argus_engine_get_user_link_' . $uid . '_' . $title . '_' . $target . '_' . $classname, $returnStr );
		}
	} else {
		$returnStr = '<i>(geen link gevonden)</i>';
	}
	
	return $returnStr;
}

/**
 * Check if this user has specified role(s).
 *
 * Function returns a boolean
 *
 * @param $uid int
 *        	User id
 * @param $roles string(!)/integer/array
 *        	String: 1st. user role will be loaded, rid will be array
 *        	2nd. variable => variable_get('argus_engine_roles_?') where ? =
 *        	- pupil
 *        	- teacher
 *        	- staff
 *        	- ilb
 *        	- ktt
 *        	Integer: integral rid
 *        	Array: integral array where keys = rids (NO CHECK!)
 *        	
 * @return boolean
 */
function argus_engine_get_user_has_role($uid, $roles) {
	if (isset ( $uid ) && isset ( $roles )) {
		// Load user
		$u = user_load ( $uid );
		if (! $u) {
			exit ( 'Wrong parameter: User not found' );
		}
		
		// Process $roles parameter
		if (is_numeric ( $roles )) {
			$roles = array (
					$roles => $roles 
			);
		} elseif (is_string ( $roles )) {
			// 1st load user role by name
			$role = user_role_load_by_name ( $roles );
			if ($role) {
				$roles = array (
						$role->rid => $role->rid 
				);
			} else {
				// 2nd try to find variable in system
				$vars = variable_get ( 'argus_engine_roles_' . $roles );
				if (count ( $vars )) {
					$roles = $vars;
				} else {
					unset ( $roles );
				}
			}
		}
		
		if (isset ( $roles )) {
			$check = array_intersect ( array_keys ( $u->roles ), array_keys ( $roles ) );
			if (count ( $check )) {
				return true;
			}
		}
		
		// No match found
		return false;
	}
}

/**
 * Retrieve an array with options for select
 *
 * @param
 *        	role string/array
 *        	Get users with specific role
 * @param
 *        	onlyActive boolean
 *        	Disgard active status
 *        	
 * @return array
 */
function argus_engine_get_user_select_options($roles = NULL, $onlyActive = TRUE) {
	global $user;
	
	if (! is_array ( $roles )) {
		$roles = array (
				$roles 
		);
	}
	$rids = array ();
	foreach ( $roles as $role ) {
		if (!intval($role)) {
			$roleObj = user_role_load_by_name ( $role );
			if ($roleObj) {
				$role = $roleObj->rid;
			} else {
				$role = false;
			}
		} else {
			$role = ( int ) $role;
		}
		
		if ($role) {
			$rids [] = $role;
		}
	}
	
	if ($cache = cache_get ( 'argus_engine_get_user_select_options_' . $user->uid . '_' . implode ( '-', $rids ) . '_' . $onlyActive )) {
		$options = $cache->data;
	} else {
		if (module_exists ( 'argus_gebruikers' )) {
			$query = 'SELECT u.uid AS uid, n.field_user_sms_naam_value AS name, v.field_user_sms_voornaam_value AS firstname, u.status ';
			$query .= 'FROM {users} AS u ';
			
			if ($rids) {
				$query .= 'INNER JOIN {users_roles} AS ur ON u.uid = ur.uid ';
			}
			
			$query .= 'INNER JOIN {field_data_field_user_sms_naam} AS n ON u.uid = n.entity_id ';
			$query .= 'INNER JOIN {field_data_field_user_sms_voornaam} AS v ON u.uid = v.entity_id ';
			$query .= 'WHERE u.uid ';
			
			if ($onlyActive) {
				$query .= ' AND u.status = 1 ';
			}
			
			$vars = array ();
			
			if ($rids) {
				$query .= ' AND ur.rid IN (:rids) ';
				$vars [':rids'] = $rids;
			}
			
			$query .= 'ORDER BY name ASC, firstname ASC';
			
			$users = db_query ( $query, $vars )->fetchAll ();
		} else {
			$users = array ();
		}
		
		$options = array ();
		foreach ( $users as $u ) {
			$option = $u->name . ', ' . $u->firstname;
			
			if (! $onlyActive) {
				if (! $u->status) {
					$option .= ' (niet actief)';
				}
			}
			
			$class = argus_klasbeheer_get_user_class ( $u->uid, 'title' );
			if ($class) {
				$option .= ' - ' . $class;
			}
			
			$options [$u->uid] = $option;
		}
		
		cache_set ( 'argus_engine_get_user_select_options_' . $user->uid . '_' . implode ( '-', $rids ) . '_' . $onlyActive, $options );
	}
	
	return $options;
}

/**
 * Retrieve basic data of requested pupil
 *
 * @param
 *        	uid int
 *        	Get data of this user
 * @param
 *        	type array (default: all types)
 *        	Get only selected types of data:
 *        	- behaviour
 *        	- study
 *        	- absences
 * @param
 *        	schoolyear int
 *        	Select schoolyear (default: current schoolyear)
 *        	
 * @return array or false
 */
function argus_engine_get_pupil_details($uid, $type = array('behaviour','study','absences'), $sy = 0) {
	if ($uid) {
		if ($cache = cache_get ( 'argus_engine_get_pupil_details_' . $user->uid . '_' . $uid .'_' . implode('-', $type) . '_' . $sy )) {
			$returnDetails = $cache->data;
		} else {
			$returnDetails = array ();
			
			/* Filter data only for this schoolyear (active schoolyear) */
			$schoolyear = ( array ) argus_schoolyear ( $sy );
			
			/* All details about behaviour */
			if (in_array ( 'behaviour', $type )) {
				$measures = array (
						'phases' => array (
								'fase1',
								'fase2',
								'bewarend',
								'tucht' 
						),
						'totals' => array (
								'positive',
								'negative' 
						) 
				);
				
				if (module_exists ( 'argus_meldingen' )) {
					/* Retrieve reports on negative behaviour in each phase */
					foreach ( $measures ['phases'] as $phase ) {
						$query = 'SELECT l.entity_id AS id, m.field_lvs_melding_msl_' . $phase . '_target_id AS mid, COUNT(m.field_lvs_melding_msl_' . $phase . '_target_id) AS cmid, mt.title AS title ' . 'FROM {field_data_field_lvs_melding_leerling} AS l ' . 'LEFT JOIN {field_data_field_lvs_melding_betreft} AS b ON l.entity_id = b.entity_id ' . 'LEFT JOIN {field_data_field_lvs_melding_msl_' . $phase . '} AS m ON l.entity_id = m.entity_id ' . 'LEFT JOIN {node} AS mt ON m.field_lvs_melding_msl_' . $phase . '_target_id = mt.nid ' . 'LEFT JOIN {field_data_field_lvs_melding_datum_feit} AS d ON l.entity_id = d.entity_id ' . 'WHERE l.field_lvs_melding_leerling_target_id = :uid ' . 'AND b.field_lvs_melding_betreft_value = :about ' . 'AND title != \'\' ' . 'AND d.field_lvs_melding_datum_feit_value BETWEEN :startdate AND :enddate ' . 'GROUP BY mid';
						$result = db_query ( $query, array (
								':uid' => $uid,
								':about' => 'negatief gedrag',
								':startdate' => $schoolyear ['start'],
								':enddate' => $schoolyear ['end'] 
						) );
						foreach ( $result->fetchAll () as $k => $r ) {
							$returnDetails ['behaviour'] ['phases'] [$phase] [] = array (
									'title' => $r->title,
									'count' => $r->cmid 
							);
						}
					}
					
					/* Get totals (also reports without measures included */
					$query = 'SELECT l.entity_id AS id, ' . 'o.field_lvs_melding_onderwerp_value AS subject, ' . 'd.field_lvs_melding_datum_feit_value AS factdate ' . 'FROM {field_data_field_lvs_melding_leerling} AS l ' . 'LEFT JOIN {field_data_field_lvs_melding_betreft} AS b ON l.entity_id = b.entity_id ' . 'LEFT JOIN {field_data_field_lvs_melding_datum_feit} AS d ON l.entity_id = d.entity_id ' . 'LEFT JOIN {field_data_field_lvs_melding_onderwerp} AS o ON l.entity_id = o.entity_id ' . 'WHERE l.field_lvs_melding_leerling_target_id = :uid AND b.field_lvs_melding_betreft_value = :about ' . 'AND d.field_lvs_melding_datum_feit_value BETWEEN :startdate AND :enddate ';
					$results = db_query ( $query, array (
							':uid' => $uid,
							':about' => 'negatief gedrag',
							':startdate' => $schoolyear ['start'],
							':enddate' => $schoolyear ['end'] 
					) )->fetchAll ();
					$returnDetails ['behaviour'] ['totals'] ['negative'] = count ( $results );
					foreach ( $results as $r ) {
						/* Retrieve reports on negative behaviour in each phase */
						$ms = array ();
						foreach ( $measures ['phases'] as $phase ) {
							$query = 'SELECT mt.title AS title ' . 'FROM {field_data_field_lvs_melding_msl_' . $phase . '} AS m ' . 'LEFT JOIN {node} AS mt ON m.field_lvs_melding_msl_' . $phase . '_target_id = mt.nid ' . 'WHERE m.entity_id = :nid ' . 'AND title != \'\'';
							$result = db_query ( $query, array (
									':nid' => $r->id 
							) );
							foreach ( $result->fetchAll () as $k => $m ) {
								$ms [] = $m->title;
							}
						}
						
						$returnDetails ['behaviour'] ['negative'] [] = array (
								'factdate' => $r->factdate,
								'subject' => $r->subject,
								'measures' => $ms 
						);
					}
					
					$query = 'SELECT l.entity_id AS id, ' . 'o.field_lvs_melding_onderwerp_value AS subject, ' . 'd.field_lvs_melding_datum_feit_value AS factdate ' . 'FROM {field_data_field_lvs_melding_leerling} AS l ' . 'LEFT JOIN {field_data_field_lvs_melding_betreft} AS b ON l.entity_id = b.entity_id ' . 'LEFT JOIN {field_data_field_lvs_melding_datum_feit} AS d ON l.entity_id = d.entity_id ' . 'LEFT JOIN {field_data_field_lvs_melding_onderwerp} AS o ON l.entity_id = o.entity_id ' . 'WHERE l.field_lvs_melding_leerling_target_id = :uid AND b.field_lvs_melding_betreft_value = :about ' . 'AND d.field_lvs_melding_datum_feit_value BETWEEN :startdate AND :enddate ';
					$results = db_query ( $query, array (
							':uid' => $uid,
							':about' => 'positief gedrag',
							':startdate' => $schoolyear ['start'],
							':enddate' => $schoolyear ['end'] 
					) )->fetchAll ();
					$returnDetails ['behaviour'] ['totals'] ['positive'] = count ( $results );
					foreach ( $results as $r ) {
						$returnDetails ['behaviour'] ['positive'] [] = array (
								'factdate' => $r->factdate,
								'subject' => $r->subject 
						);
					}
				} else {
					$returnDetails ['behaviour'] = array (
							'phases' => array (),
							'negative' => array (),
							'positive' => array (),
							'totals' => array (
									'negative' => 0,
									'positive' => 0 
							) 
					);
				}
			}
			
			/* All details about absences */
			if (module_exists ( 'argus_afwezigheden' )) {
				if (in_array ( 'absences', $type )) {
					$codes = array (
							'-',
							'B',
							'L',
							'D',
							'Z',
							'G',
							'T',
							'C',
							'H',
							'R',
							'O',
							'Q',
							'P',
							'J' 
					);
					$returnDetails ['absences'] ['totals'] = array ();
					foreach ( $codes as $code ) {
						$query = 'SELECT id ' . 'FROM {argus_lvs_afwezigheden} AS a ' . 'WHERE a.leerling = :uid AND am = :code ' . 'AND datum BETWEEN :startdate AND :enddate ';
						$result = db_query ( $query, array (
								':uid' => $uid,
								':code' => $code,
								':startdate' => $schoolyear ['start'],
								':enddate' => $schoolyear ['end'] 
						) );
						$total = $result->rowCount ();
						$query = 'SELECT id ' . 'FROM {argus_lvs_afwezigheden} AS a ' . 'WHERE a.leerling = :uid AND pm = :code ' . 'AND datum BETWEEN :startdate AND :enddate ';
						$result = db_query ( $query, array (
								':uid' => $uid,
								':code' => $code,
								':startdate' => $schoolyear ['start'],
								':enddate' => $schoolyear ['end'] 
						) );
						$total += $result->rowCount ();
						if ($total) {
							$returnDetails ['absences'] ['totals'] [] = array (
									'code' => $code,
									'count' => $total 
							);
						}
					}
				}
			} else {
				$returnDetails ['absences'] ['totals'] = array ();
			}
			
			/* ALl details about study */
			if (module_exists ( 'argus_vakken' )) { // TODO: argus_skore?
				if (in_array ( 'study', $type )) {
					$returnDetails ['study'] = array (
							'results' => array (),
							'fails' => array () 
					);
					$query = 'SELECT id, afkorting, omschrijving ' . 'FROM {argus_skore_periode} ' . 'ORDER BY volgorde ASC';
					$periods = db_query ( $query )->fetchAll ();
					foreach ( $periods as $p ) {
						$query = 'SELECT r.vak, r.behaald, r.max, ca.field_vak_afkorting_value AS vak_afkorting, cb.field_vak_beschrijving_value AS vak_beschrijving ' . 'FROM {argus_skore_resultaten} AS r ' . 'LEFT JOIN {field_data_field_vak_afkorting} AS ca ON r.vak = ca.entity_id ' . 'LEFT JOIN {field_data_field_vak_beschrijving} AS cb ON r.vak = cb.entity_id ' . 'WHERE r.leerling = :uid AND r.schooljaar = :schoolyear AND r.periode = :pid ' . 'ORDER BY cb.field_vak_beschrijving_value ASC';
						$results = db_query ( $query, array (
								':uid' => $uid,
								':pid' => $p->id,
								'schoolyear' => substr ( $schoolyear ['start'], 0, 4 ) . '-' . substr ( $schoolyear ['end'], 0, 4 ) 
						) )->fetchAll ();
						$fails = array ();
						foreach ( $results as $r ) {
							if (isset ( $r->behaald )) {
								$returnDetails ['study'] ['results'] ['periods'] [$p->id] ['results'] [$r->vak] = array (
										'behaald' => round ( $r->behaald, 1 ),
										'max' => round ( $r->max ),
										'percent' => round ( $r->behaald / $r->max * 100, 1 ),
										'vak_afkorting' => $r->vak_afkorting,
										'vak_beschrijving' => $r->vak_beschrijving 
								);
								
								if (( real ) $r->behaald < (( real ) $r->max) / 2) {
									$returnDetails ['study'] ['fails'] [$p->afkorting] [] = array (
											'vak_afkorting' => $r->vak_afkorting,
											'vak_beschrijving' => $r->vak_beschrijving,
											'result' => round ( $r->behaald, 1 ),
											'max' => round ( $r->max ) 
									);
								}
							}
						}
					}
				}
			} else {
				$returnDetails ['study'] = array (
						'results' => array (
								'periods' => array () 
						),
						'fails' => array () 
				);
			}
			
			cache_set ( 'argus_engine_get_pupil_details_' . $user->uid . '_' . $uid .'_' . implode('-', $type) . '_' . $sy, $returnDetails );
		}
	}
	
	/* Return retrieved details or false when no data found */
	if (count ( $returnDetails )) {
		return $returnDetails;
	} else {
		return false;
	}
}

/**
 * Return dates for requested schoolyear
 *
 * @param $schoolyear int
 *        	1970 - today
 * @param $format string
 *        	Representing formats used by PHP
 * @param $today datestring
 *        	Defaults to current date/time
 *        	
 * @return type array(startdate,enddate)
 */
function argus_schoolyear($schoolyear = 0, $format = 'Ymd', $today = NULL) {
	if ($today) {
		$today = new DateTime ( $today );
	}
	
	if (! $today) {
		$today = new DateTime ( 'NOW' );
	}
	
	if ($schoolyear == 0 || ! is_numeric ( $schoolyear ) || $schoolyear < 1970 || $schoolyear > $today->format ( 'Y' )) {
		$schoolyear = $today->format ( 'Y' );
	}
	
	if (date ( 'n', $today->getTimestamp () ) < 9) {
		$schoolyear --;
	}
	
	$schoolyearStart = new DateTime ( $schoolyear . '0901' );
	$schoolyearEnd = new DateTime ( ($schoolyear + 1) . '0831' );
	
	return array (
			'start' => $schoolyearStart->format ( $format ),
			'end' => $schoolyearEnd->format ( $format ) 
	);
}

/**
 * Return ouput template selection box for schoolyears
 *
 * @param $defaultValue boolean
 *        	Set to FALSE when you want keep in control of actions when value changes. Defaults to TRUE.
 * @param $onlySelect boolean
 *        	Set to TRUE when you only need the selection box without titles. Defaults to FALSE.
 * @param $addScript boolean
 *        	Set to FALSE when you want keep in control of actions when value changes. Defaults to TRUE.
 *        	
 * @return type string HTML-output
 */
function argus_engine_schoolyear_selectionBox($defaultValue = NULL, $onlySelect = FALSE, $addScript = TRUE) {
	// Determine default value; first from param then from url => get
	if (! $defaultValue) {
		$params = drupal_get_query_parameters ();
		if (array_key_exists ( 'schooljaar', $params )) {
			$defaultValue = $params ['schooljaar'];
		}
	}
	
	if ($cache = cache_get ( 'argus_engine_schoolyear_selectionBox_' . $defaultValue . '_' . $onlySelect . '_' . $addScript )) {
		$returnStr = $cache->data;
	} else {
		$returnStr = '<select id="schoolyear_select_box" name="schoolyear_select_box"';
		if ($addScript) {
			$returnStr .= ' onchange="javascript:window.location.href = \'' . base_path () . drupal_lookup_path ( 'alias', current_path () ) . '?schooljaar=\'+this.value;"';
		}
		$returnStr .= '>';
		
		$schoolyear = ( int ) substr ( argus_schoolyear () ['start'], 0, 4 );
		for($y = 0; $y < 6; $y ++) {
			$returnStr .= '<option value="' . ($schoolyear - $y) . '"';
			if ($schoolyear - $y == $defaultValue) {
				$returnStr .= ' selected="selected"';
			}
			$returnStr .= '>' . ($schoolyear - $y) . ' - ' . ($schoolyear - $y + 1) . '</option>';
		}
		$returnStr .= '</select>';
		
		if (! $onlySelect) {
			$returnStr = ' - ' . t ( 'schooljaar' ) . ': ' . $returnStr;
		}
		
		cache_set ( 'argus_engine_schoolyear_selectionBox_' . $defaultValue . '_' . $onlySelect . '_' . $addScript, $returnStr );
	}
	
	return $returnStr;
}

/**
 * Implements hook_mail().
 */
function argus_engine_mail($subject, $msg, $to, $node = NULL) {
	global $user;
	if ($node) {
		$params = array (
				'@url' => url ( 'node/' . $node->nid, array (
						'absolute' => TRUE 
				) ),
				'@title' => $node->title 
		);
	} else {
		$params = array (
				'@url' => current_path (),
				'@title' => $subject 
		);
	}
	
	$module = 'argus_engine';
	$key = 'argus';
	$language = language_default ();
	if ($user->mail) {
		$from = $user_ > mail;
	} else {
		$from = 'argus-noreply@noreply.domain';
	}
	$send = FALSE;
	$message = drupal_mail ( $module, $key, $email, $language, $params, $from, $send );
	
	$message ['subject'] = t ( '[argus-mail] - @title', $params );
	
	$message ['body'] = array ();
	$message ['body'] [] = t ( $msg, $params );
	$message ['body'] [] = t ( "Node has been created @title (@url).", $params );
	
	// Retrieve the responsible implementation for this message.
	$system = drupal_mail_system ( $module, $key );
	
	// Format the message body.
	$message = $system->format ( $message );
	
	// Send e-mail.
	if ($client = argus_sms_getSOAPclient ()) {
		if (variable_get ( 'argus_engine_demo_mode' )) {
			$message ['result'] = TRUE;
		} else {
			$message ['result'] = $system->mail ( $message );
		}
		if (! $message ['result']) {
			argus_report ( 'Mail naar %to kon niet verzonden worden', array (
					'%to' => $email 
			), 'error' );
		} else {
			argus_report ( 'Mail naar %to succesvol verzonden', array (
					'%to' => $email 
			), 'status' );
		}
	}
}

/**
 * Report to user
 *
 * @param $message string
 *        	Unformatted text for display; HTML-tags are allowed
 * @param $vars array
 *        	of string ':var'
 *        	Variable fields used for transition in message; usage ('key' => 'replacement string')
 * @param $type string
 *        	Indicate which form of message to be used; possible values: warning, error, status (default)
 * @param $cat string
 *        	Identifier field for grouping messages in watchdog and reporting modules (default: argus)
 */
function argus_report($message, $vars = array(), $type = 'status', $cat = 'argus') {
	foreach ( $vars as $k => $var ) {
		$message = str_replace ( $k, $var, $message );
	}
	drupal_set_message ( $message, $type );
	
	if (isset ( $cat )) {
		switch ($type) {
			case 'warning' :
				$type = WATCHDOG_WARNING;
				break;
			case 'error' :
				$type = WATCHDOG_ERROR;
				break;
			case 'status' :
			default :
				$type = WATCHDOG_INFO;
				break;
		}
		watchdog ( $cat, $message, $vars, $type );
	}
}

/**
 * Sanitize string
 *
 * @param $str string
 *        	String to check and adjust for use in accountnames, filenames, etc.
 * @return string Sanitized string
 */
function argus_engine_sanitize_string($str) {
	$str = str_replace ( ' ', '-', $str );
	
	$str = strtolower ( $str );
	
	$str = preg_replace ( '/[öÖôÔòÒóÓõÕ]+/', 'o', $str );
	$str = preg_replace ( '/[ëËêÊèÈéÉ]+/', 'e', $str );
	$str = preg_replace ( '/[äÄâÂàÀáÁãÃ]+/', 'a', $str );
	$str = preg_replace ( '/[üÜûÛùÙúÚ]+/', 'u', $str );
	$str = preg_replace ( '/[ïÏîÎìÌíÍ]+/', 'i', $str );
	$str = preg_replace ( '/[ÿŸ]+/', 'y', $str );
	
	$str = strip_tags ( $str );
	$str = preg_replace ( '/[\r\n\t ]+/', ' ', $str );
	$str = preg_replace ( '/[\"\*\/\:\<\>\?\'\|]+/', ' ', $str );
	$str = html_entity_decode ( $str, ENT_QUOTES, "utf-8" );
	$str = htmlentities ( $str, ENT_QUOTES, "utf-8" );
	$str = preg_replace ( "/(&)([a-z])([a-z]+;)/i", '$2', $str );
	$str = rawurlencode ( $str );
	$str = str_replace ( '%', '-', $str );
	
	$str = preg_replace ( '/[^a-z]/', '-', $str );
	
	return $str;
}

/**
 * Order an array by given key
 *
 * @param $field string
 *        	Fieldname corresponding key in array
 * @param $array array
 *        	Array to order
 * @param $direction string
 *        	ASC / DESC set the order
 */
function argus_engine_sortBy($field, &$array, $direction = 'ASC') {
	uasort ( $array, create_function ( '$a, $b', '
			$a = $a["' . $field . '"];
			$b = $b["' . $field . '"];

			if ($a == $b)
			{
				return 0;
			}

			return ($a ' . ($direction == 'DESC' ? '>' : '<') . ' $b) ? -1 : 1;
		' ) );
	
	return true;
}

/**
 * Return all users who have the given role.
 *
 * @param int|string $role
 *        	Name of the role or the ID or the role.
 * @param bool|TRUE $active_user
 *        	Determine, if only the active users should be returned.
 * @param bool|FALSE $only_keys
 *        	Return only the uids as array.
 * @return array Array of user objects.
 */
function argus_engine_get_users_with_role($role, $active_user = TRUE, $only_keys = FALSE) {
	global $user;
	
	$users = array ();
	
	$rid = 0;
	if (is_int ( $role )) {
		$rid = $role;
	} else {
		if ($role_obj = user_role_load_by_name ( $role )) {
			$rid = $role_obj->rid;
		}
	}
	
	if ($rid) {
		if ($cache = cache_get ( 'argus_engine_get_users_with_role_' . $user->id . '_' . $rid . '_' . $active_user . '_' . $only_keys )) {
			$users = $cache->data;
		} else {
			$uids = db_select ( 'users_roles', 'ur' )->fields ( 'ur', array (
					'uid' 
			) )->condition ( 'ur.rid', $rid )->execute ()->fetchCol ();
			if (! empty ( $uids )) {
				$query = new EntityFieldQuery ();
				$query->entityCondition ( 'entity_type', 'user' )->propertyCondition ( 'uid', $uids, 'IN' );
				if ($active_user) {
					$query->propertyCondition ( 'status', 1 );
				}
				$entities = $query->execute ();
				if ($only_keys) {
					$users = array_keys ( $entities ['user'] );
				} else {
					if (! empty ( $entities )) {
						$users = user_load_multiple ( array_keys ( $entities ['user'] ) );
					}
				}
			}
			
			cache_set ( 'argus_engine_get_users_with_role_' . $user->id . '_' . $rid . '_' . $active_user . '_' . $only_keys, $users );
		}
	}
	
	return $users;
}

/**
 * Return all periods.
 *
 * @param bool|FALSE $optionList
 *        	Get an array for use as optionlist in field select.
 *        	
 * @return array Array of periods.
 */
function argus_engine_get_periods($optionList = false) {
	$periods = array ();
	
	for($x = 1; $x < 11; $x ++) {
		if (variable_get ( 'period_' . $x . '_shortname', NULL ) && variable_get ( 'period_' . $x . '_type', NULL ) && variable_get ( 'period_' . $x . '_startdate', NULL ) && variable_get ( 'period_' . $x . '_enddate', NULL )) {
			if ($optionList) {
				$periods [variable_get ( 'period_' . $x . '_shortname' )] = variable_get ( 'period_' . $x . '_fullname', NULL ) . ' (' . variable_get ( 'period_' . $x . '_shortname' ) . ')';
			} else {
				$periods [variable_get ( 'period_' . $x . '_shortname' )] = array (
						'fullname' => variable_get ( 'period_' . $x . '_fullname', NULL ),
						'type' => variable_get ( 'period_' . $x . '_type', NULL ),
						'startdate' => variable_get ( 'period_' . $x . '_startdate', NULL ),
						'enddate' => variable_get ( 'period_' . $x . '_enddate', NULL ) 
				);
			}
		}
	}
	
	return $periods;
}

/**
 * Generate password.
 *
 * @return string. Een wachtwoord dient minstens uit 8 karakters te bestaan en aan 3 van de 4 volgende voorwaarden voldoen:
 *         - een kleine letter bevatten (a-z);
 *         - een hoofdletter bevatten (A-Z);
 *         - een cijfer bevatten (0-9);
 *         - een ander karakter bevatten (._-*!?/).
 */
function argus_engine_generate_password() {
	$pwd = bin2hex ( openssl_random_pseudo_bytes ( 5 ) );
	
	// Add small letter
	$pos = rand ( 0, 9 );
	$pwd = substr ( $pwd, 0, $pos ) . chr ( rand ( 97, 122 ) ) . substr ( $pwd, $pos );
	
	// Add capital letter
	$pos = rand ( 0, 9 );
	$pwd = substr ( $pwd, 0, $pos ) . chr ( rand ( 65, 90 ) ) . substr ( $pwd, $pos );
	
	// Add number
	$pos = rand ( 0, 9 );
	$pwd = substr ( $pwd, 0, $pos ) . rand ( 0, 9 ) . substr ( $pwd, $pos );
	
	// Add character
	$pos = rand ( 0, 9 );
	$pwd = substr ( $pwd, 0, $pos ) . '_' . substr ( $pwd, $pos );
	
	return $pwd;
}

/**
 * Check password.
 *
 * @return boolean. Een wachtwoord dient minstens uit 8 karakters te bestaan en aan 3 van de 4 volgende voorwaarden voldoen:
 *         - een kleine letter bevatten (a-z);
 *         - een hoofdletter bevatten (A-Z);
 *         - een cijfer bevatten (0-9);
 *         - een ander karakter bevatten (._-*!?/).
 */
function argus_engine_check_password($pwd) {
	$pwdOK = true;
	
	// Add small letter
	for($x = 97; $x < 123; $x ++) {
		if (! stristr ( $pwd, chr ( $x ) )) {
			$pwdOK = false;
		}
	}
	
	// Add capital letter
	for($x = 65; $x < 90; $x ++) {
		if (! stristr ( $pwd, chr ( $x ) )) {
			$pwdOK = false;
		}
	}
	
	// Add number
	for($x = 0; $x < 9; $x ++) {
		if (! stristr ( $pwd, $x )) {
			$pwdOK = false;
		}
	}
	
	// Add character
	if (! stristr ( $pwd, '_' )) {
		$pwdOK = false;
	}
	
	return $pwdOK;
}

/**
 * Check password.
 *
 * @return boolean. Een wachtwoord dient minstens uit 8 karakters te bestaan en aan 3 van de 4 volgende voorwaarden voldoen:
 *         - een kleine letter bevatten (a-z);
 *         - een hoofdletter bevatten (A-Z);
 *         - een cijfer bevatten (0-9);
 *         - een ander karakter bevatten (._-*!?/).
 */
function argus_engine_cache_clear($type = 'user') {
	switch ($type) {
		case 'module' :
			cache_clear_all ( 'quicknav_modulesList_', 'cache', true );
			break;
		case 'user' :
			cache_clear_all ( 'argus_engine_get_user_link_', 'cache', true );
			cache_clear_all ( 'argus_engine_get_user_select_options_', 'cache', true );
			cache_clear_all ( 'quicknav_myPeopleList_', 'cache', true );
			cache_clear_all ( 'smartschool_users_by_role_', 'cache', true );
			cache_clear_all ( 'smartschool_search_users_by_role_view_', 'cache', true );
		case 'node' :
		default :
			cache_clear_all ( 'argus_lokalen_get_active_classrooms', 'cache', true );
			cache_clear_all ( 'argus_klasbeheer_get_active_classes_', 'cache', true );
			cache_clear_all ( 'argus_klasbeheer_get_pupils_', 'cache', true );
			cache_clear_all ( 'argus_klasbeheer_get_teachers_', 'cache', true );
			cache_clear_all ( 'argus_uurrooster_get_users_with_schedule_', 'cache', true );
			cache_clear_all ( 'argus_uurrooster_vervanging_list_full_', 'cache', true );
	}
	
	// These caches should be cleared always
	cache_clear_all ( 'navigation_', 'cache', true );
	cache_clear_all ( 'quicknav_myTasksList_', 'cache', true );
	cache_clear_all ( 'quicknav_myItemsListByTitle_', 'cache', true );
	cache_clear_all ( 'quicknav_myItemsListByCreated_', 'cache', true );
	cache_clear_all ( 'quicknav_myItemsListByChanged_', 'cache', true );
	cache_clear_all ( 'quicknav_myItemsListByTitle_', 'cache', true );
	cache_clear_all ( 'quicknav_myQuicklinks_', 'cache', true );
}