<?php
/**
 * @file
 * Code for the Uurrooster feature.
 */

include_once 'argus_uurrooster.features.inc';

/* 
 * Copyright (C) 2014 bartgysens
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/* Drupal Hooks */

/**
 * Implements argus_uurrooster_menu().
 */
function argus_uurrooster_menu() {
    $items = array();

    $items['admin/config/argus/uurrooster'] = array(
    		'title' => 'Uurrooster',
    		'description' => 'Instellingen voor het gebruik van je geïmporteerde uurrooster uit Untis.',
    		'page callback' => 'drupal_get_form',
    		'page arguments' => array('argus_uurrooster_setup_form'),
    		'access arguments' => array('access administration pages'),
    		'type' => MENU_NORMAL_ITEM,
    		'weight' => 1,
    );
	    $items['admin/config/argus/uurrooster/permanentierooster'] = array(
	    		'title' => 'Permanentierooster',
	    		'description' => 'Maak een permanentierooster nadat je het rooster hebt geïmporteerd vanuit GP Untis.',
	    		'page callback' => 'drupal_get_form',
	    		'page arguments' => array('argus_uurrooster_permanentie_form'),
	    		'access arguments' => array('access administration pages'),
	    		'type' => MENU_NORMAL_ITEM,
	    		'weight' => 1,
	    );
	    $items['admin/config/argus/uurrooster/toezichtenrooster'] = array(
	        'title' => 'Toezichtenrooster',
	        'description' => 'Maak een toezichtenrooster nadat je het rooster hebt geïmporteerd vanuit GP Untis.',
	        'page callback' => 'drupal_get_form',
	        'page arguments' => array('argus_uurrooster_toezichten_form'),
	        'access arguments' => array('access administration pages'),
	        'type' => MENU_NORMAL_ITEM,
	        'weight' => 1,
	    );
    
    $items['uurrooster'] = array(
        'title' => t('Uurroosters'),
        'page callback' => 'argus_uurrooster_overview',
        'access arguments' => array('access argus_uurrooster_schedules content'),
        'menu_name' => 'menu-modules',
    );
    $items['uurrooster/klas'] = array(
        'title' => t('Uurrooster').' - '.t('Klas'),
        'page callback' => 'argus_uurrooster_schedule_classes',
        'access arguments' => array('access argus_uurrooster_schedules content'),
        'type' => MENU_CALLBACK,
    );
    $items['uurrooster/leerkracht'] = array(
        'title' => t('Uurrooster').' - '.t('Leerkracht / opvoeder'),
        'page callback' => 'argus_uurrooster_schedule_lkr',
        'access arguments' => array('access argus_uurrooster_schedules content'),
        'type' => MENU_CALLBACK,
    );
    $items['uurrooster/beschikbare-leerkrachten'] = array(
        'title' => t('Beschikbare leerkrachten'),
        'page callback' => 'argus_uurrooster_schedule_lkr_available',
        'access arguments' => array('access argus_uurrooster_available_lkr_schedule content'),
        'menu_name' => array('menu-modules', 'uurrooster'),
    );
    $items['uurrooster/leerling'] = array(
        'title' => t('Uurrooster').' - '.t('Leerling'),
        'page callback' => 'argus_uurrooster_schedule_lln',
        'access arguments' => array('access argus_uurrooster_schedules content'),
        'type' => MENU_CALLBACK,
    );
    $items['uurrooster/lokaal'] = array(
        'title' => t('Uurrooster').' - '.t('Lokaal'),
        'page callback' => 'argus_uurrooster_schedule_rooms',
        'access arguments' => array('access argus_uurrooster_schedules content'),
        'type' => MENU_CALLBACK,
    );
    $items['uurrooster/beschikbare-lokalen'] = array(
        'title' => t('Beschikbare lokalen'),
        'page callback' => 'argus_uurrooster_schedule_rooms_available',
        'access arguments' => array('access argus_uurrooster_available_rooms_schedule content'),
        'menu_name' => array('menu-modules', 'uurrooster'),
    );
    $items['uurrooster/lokaalbezetting'] = array(
        'title' => t('Lokaalbezetting'),
        'page callback' => 'argus_uurrooster_schedule_rooms_occupied',
        'access arguments' => array('access argus_uurrooster_room_occupation_schedule content'),
        'menu_name' => array('menu-modules', 'uurrooster'),
    );
    $items['uurrooster/capaciteit-lokalen'] = array(
        'title' => t('Capaciteit lokalen'),
        'page callback' => 'argus_uurrooster_schedule_rooms_capacity',
        'access arguments' => array('access argus_uurrooster_room_capacity_schedule content'),
        'menu_name' => array('menu-modules', 'uurrooster'),
    );
    
    $items['uurrooster/permanentierooster'] = array(
        'title' => t('Permanentierooster'),
        'page callback' => 'argus_uurrooster_substitutes',
        'access arguments' => array('access argus_uurrooster_substitution_schedule content'),
        'menu_name' => array('menu-modules', 'uurrooster'),
    );
    $items['uurrooster/toezichtenrooster'] = array(
        'title' => t('Toezichtenrooster'),
        'page callback' => 'argus_uurrooster_supervisions',
        'access arguments' => array('access argus_uurrooster_supervision_schedule content'),
        'menu_name' => array('menu-modules', 'uurrooster'),
    );
    $items['uurrooster/overzicht-toezichten-permanenties'] = array(
        'title' => t('Overzicht toezichten & permanenties'),
        'page callback' => 'argus_uurrooster_overview_substitutions_supervisions',
        'access arguments' => array('access argus_uurrooster_overview_substitutions_supervisions content'),
        'type' => MENU_NORMAL_ITEM,
        'menu_name' => array('menu-modules', 'uurrooster'),
    );
    $items['uurrooster/ambtsbevoegdheden'] = array(
        'title' => t('Ambtsbevoegdheden'),
        'page callback' => 'argus_uurrooster_assignments',
        'access arguments' => array('access argus_uurrooster_assignments content'),
        'type' => MENU_NORMAL_ITEM,
        'menu_name' => array('menu-modules', 'uurrooster'),
    );
    $items['uurrooster/controle-groepen'] = array(
        'title' => t('Controle groepen / leerkrachten'),
        'page callback' => 'argus_uurrooster_check_groups',
        'access arguments' => array('access argus_uurrooster_check_groups content'),
        'type' => MENU_NORMAL_ITEM,
        'menu_name' => array('menu-modules', 'uurrooster'),
    );
    
    /* Call back for retrieving details on front side by AJAX-request*/
    $items['uurrooster/lesson.retrieve'] = array(
        'page callback' => 'argus_uurrooster_lesson_retrieve',
        'access arguments' => array('access argus_uurrooster_schedules content'),
        'type' => MENU_CALLBACK,
    );
    $items['uurrooster/freeRooms.retrieve'] = array(
        'page callback' => 'argus_uurrooster_freeRooms_retrieve',
        'access arguments' => array('access argus_uurrooster_schedules content'),
        'type' => MENU_CALLBACK,
    );
    $items['uurrooster/occupiedRooms.retrieve'] = array(
        'page callback' => 'argus_uurrooster_occupiedRooms_retrieve',
        'access arguments' => array('access argus_uurrooster_schedules content'),
        'type' => MENU_CALLBACK,
    );
    $items['uurrooster/freeTeachers.retrieve'] = array(
        'page callback' => 'argus_uurrooster_freeTeachers_retrieve',
        'access arguments' => array('access argus_uurrooster_schedules content'),
        'type' => MENU_CALLBACK,
    );
    $items['uurrooster/supervision.retrieve'] = array(
        'page callback' => 'argus_uurrooster_supervision_retrieve',
        'access arguments' => array('access argus_uurrooster_schedules content'),
        'type' => MENU_CALLBACK,
    );
    
    /* Call back for editing substitutions on front side by AJAX-request*/
    $items['uurrooster/substitution.create'] = array(
        'page callback' => 'argus_uurrooster_substitution_create',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );
    $items['uurrooster/substitution.delete'] = array(
        'page callback' => 'argus_uurrooster_substitution_delete',
        'access arguments' => array('access argus_uurrooster_schedules content'),
        'type' => MENU_CALLBACK,
    );
    
    /* Call back for editing supervisions on front side by AJAX-request*/
    $items['uurrooster/supervision.create'] = array(
        'page callback' => 'argus_uurrooster_supervision_create',
        'access arguments' => array('access argus_uurrooster_schedules content'),
        'type' => MENU_CALLBACK,
    );
    $items['uurrooster/supervision.delete'] = array(
        'page callback' => 'argus_uurrooster_supervision_delete',
        'access arguments' => array('access argus_uurrooster_schedules content'),
        'type' => MENU_CALLBACK,
    );
    return $items;
}

/**
 * Page callback: argus_uurrooster instellingen
 *
 * @see argus_uurrooster_menu()
 */
function argus_uurrooster_setup_form($form, &$form_state) {
	/**
	 * Index for calculating real hours into assignments
	 */
	$form['ambtsbevoegdheden'] = array(
			'#type' => 'fieldset',
			'#title' => t('Ambtsbevoegdheden'),
			'#description' => t('Voor de berekening van de score wordt er rekening gehouden met het aantal leerlingen per groep. Het aantal minuten wordt verrekend per <strong>schooljaar</strong>.'),
			'#collapsible' => TRUE,
			'#collapsed' => FALSE,
	);
		$form['ambtsbevoegdheden']['argus_uurrooster_index_noncourses'] = array(
				'#type' => 'textfield',
				'#title' => t('Index'),
				'#default_value' => variable_get('argus_uurrooster_index_noncourses',1),
				'#description' => t('Welke index wordt gebruikt binnen jouw organisatie voor de berekening van de effectieve uren BPT, GOK, ICT...?'),
				'#size' => 10,
				'#required' => TRUE,
		);
		$form['ambtsbevoegdheden']['argus_uurrooster_show_totals'] = array(
				'#type' => 'checkbox',
				'#title' => t('Totalen tonen'),
				'#default_value' => variable_get('argus_uurrooster_show_totals'),
		);
		$form['ambtsbevoegdheden']['argus_uurrooster_show_plage'] = array(
	        '#type' => 'checkbox',
	        '#title' => t('Plage-uren tonen'),
	        '#default_value' => variable_get('argus_uurrooster_show_plage'),
	    );
	
    return system_settings_form($form);
}

/**
 * Page callback: argus_uurrooster instellingen - permanentie
 *
 * @see argus_uurrooster_menu()
 */
function argus_uurrooster_permanentie_form($form, &$form_state) {
	/**
	 * Maximum amount of substitions
	 */
	//TODO: Code needed in lower function
	$form['argus_uurrooster_substitutions_maximum'] = array(
		'#type' => 'textfield',
		'#title' => t('Maximum'),
		'#default_value' => variable_get('argus_uurrooster_substitutions_maximum',1),
		'#description' => t('Geef aan hoeveel keer een gebruiker maximaal permanentie mag uitvoeren.'),
        '#size' => 10,
        '#required' => TRUE,
	);
    
    $form['people'] = array(
        '#type' => 'fieldset',
        '#title' => t('Personen'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#description' => t('Selecteer de personen die aan permanentie worden gekoppeld.'),
    );
	
	/**
	 * Roles: users with this role can do substitutions
	 */
    $options = user_roles($membersOnly = true);
	$form['people']['argus_uurrooster_substitutions_roles'] = array(
		'#type' => 'select',
		'#title' => t('Vervangers'),
		'#multiple' => true,
		'#options' => $options,
		'#default_value' => variable_get('argus_uurrooster_substitutions_roles',NULL),
		'#description' => t('Selecteer de rollen waaruit gebruikers als vervangers worden aangeduid.'),
		'#size' => 20,
	);
	
	/**
	 * Exemptions: users not listed for substitution
	 */
	$form['people']['argus_uurrooster_substitutions_exemptions_reason'] = array(
		'#type' => 'textfield',
		'#title' => t('Reden'),
		'#default_value' => variable_get('argus_uurrooster_substitutions_exemptions_reason'),
		'#description' => t('Geef de reden(en) aan waarom deze personen niet de lijst worden opgenomen: "Personen die niet in de selectie mogen worden opgenomen (wegens <u><reden></u>)..."'),
        '#size' => 100,
        '#required' => TRUE,
	);
	$form['people']['argus_uurrooster_substitutions_exemptions'] = array(
		'#type' => 'select',
		'#title' => t('Uitzonderingen'),
		'#multiple' => true,
	    '#options' => webform_users_list_get_list(variable_get('argus_uurrooster_substitutions_roles')),
		'#default_value' => variable_get('argus_uurrooster_substitutions_exemptions',NULL),
		'#description' => t('Selecteer de gebruikers die niet moeten opgenomen worden in het permanentierooster.'),
		'#size' => 20,
	);
	
	$form['people']['argus_uurrooster_substitutions_exemptions_remarks'] = array(
		'#type' => 'textarea',
		'#title' => t('Opmerkingen'),
		'#default_value' => variable_get('argus_uurrooster_substitutions_exemptions_remarks'),
		'#description' => t('Noteer hier specifieke vereisten of afwijkingen (per persoon).'),
	);
	return system_settings_form($form);
}

/**
 * Page callback: argus_uurrooster instellingen - toezichten
 *
 * @see argus_uurrooster_menu()
 */
function argus_uurrooster_toezichten_form($form, &$form_state) {
	/**
	 * Maximum amount of substitions
	 */
	//TODO: Code needed in lower function
	$form['argus_uurrooster_supervisions_short_maximum'] = array(
			'#type' => 'textfield',
			'#title' => t('Maximum aantal korte toezichten'),
			'#default_value' => variable_get('argus_uurrooster_supervisions_short_maximum',2),
			'#description' => t('Geef aan hoeveel keer een gebruiker maximaal een kort toezicht mag uitvoeren.'),
			'#size' => 10,
			'#required' => TRUE,
	);
	//TODO: Code needed in lower function
	$form['argus_uurrooster_supervisions_long_maximum'] = array(
			'#type' => 'textfield',
			'#title' => t('Maximum aantal lange toezichten'),
			'#default_value' => variable_get('argus_uurrooster_supervisions_long_maximum',1),
			'#description' => t('Geef aan hoeveel keer een gebruiker maximaal een lang toezicht mag uitvoeren.'),
			'#size' => 10,
			'#required' => TRUE,
	);
    
    $form['people'] = array(
        '#type' => 'fieldset',
        '#title' => t('Personen'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#description' => t('Selecteer de personen die aan toezichten worden gekoppeld.'),
    );

	/**
	 * Roles: users with this role can do supervisions
	*/
	$form['people']['argus_uurrooster_supervisions_roles'] = array(
			'#type' => 'select',
			'#title' => t('Toezichters'),
			'#multiple' => true,
			'#options' => user_roles($membersOnly = true),
			'#default_value' => variable_get('argus_uurrooster_supervisions_roles',NULL),
			'#description' => t('Selecteer de rollen waaruit gebruikers als toezichters worden aangeduid.'),
			'#size' => 20,
	);

	/**
	 * Exemptions: users not listed for supervisions
	 */
	$form['people']['argus_uurrooster_supervisions_exemptions_reason'] = array(
		'#type' => 'textfield',
		'#title' => t('Reden'),
		'#default_value' => variable_get('argus_uurrooster_supervisions_exemptions_reason'),
		'#description' => t('Geef de reden(en) aan waarom deze personen niet de lijst worden opgenomen: "Personen die niet in de selectie mogen worden opgenomen (wegens <u><reden></u>)..."'),
        '#size' => 100,
        '#required' => TRUE,
	);
	
	$form['people']['argus_uurrooster_supervisions_exemptions'] = array(
			'#type' => 'select',
			'#title' => t('Uitzonderingen'),
			'#multiple' => true,
			'#options' => webform_users_list_get_list(variable_get('argus_uurrooster_supervisions_roles')),
			'#default_value' => variable_get('argus_uurrooster_supervisions_exemptions',NULL),
			'#description' => t('Selecteer de gebruikers die niet moeten opgenomen worden in het toezichtenrooster.'),
			'#size' => 20,
	);
	
	$form['people']['argus_uurrooster_supervisions_exemptions_remarks'] = array(
		'#type' => 'textarea',
		'#title' => t('Opmerkingen'),
		'#default_value' => variable_get('argus_uurrooster_supervisions_exemptions_remarks'),
		'#description' => t('Noteer hier specifieke vereisten of afwijkingen (per persoon).'),
	);
	return system_settings_form($form);
}

	/* Get user list and return it */
	function webform_users_list_get_list($rids = array()) {
		$role = user_role_load_by_name('leerkracht');
		$query = 'SELECT DISTINCT(u.uid) AS id '
				. 'FROM {users_roles} AS ur '
				. 'INNER JOIN {users} AS u ON u.uid = ur.uid '
				. 'WHERE ur.rid IN (:rid) AND u.status = 1';
		$allTeachers = db_query($query, array(':rid' => $rids))->fetchCol();
		
		$user_names = array();
		foreach($allTeachers as $t) {
			$user_names[$t] = argus_get_user_realname($t);
	    }
	    asort($user_names);
	    return $user_names;
	}

/** 
 * Implement hook_block_info().
 */
function argus_uurrooster_block_info() {
    $blocks = array();
    $blocks['filter_block'] = array(
        'info' => t('Filter'),
        'title' => t('Filter'),
    );

    return $blocks;
}

/** 
 * Implement hook_block_view().
 */
function argus_uurrooster_block_view($delta='') {
    $block = array();
    
    $p = explode('/',current_path());
    if ($p[0] == 'uurrooster') {
        $variables = array();
        
        if (isset($p[2])) {
            switch ($p[1]) {
                case 'klas':
                    $variables = array(
                        'cid' => $p[2],
                    );
                    break;
                case 'leerkracht':
                case 'leerling':
                    $variables = array(
                        'uid' => $p[2],
                    );
                    break;
                case 'lokaal':
                    $variables = array(
                        'rid' => $p[2],
                    );
                    break;
            }
        }

        switch($delta) {
            case 'filter_block' :
                $block['content'] = theme('argus_uurrooster_filter_block', $variables);
                break;
        }
        drupal_add_css(drupal_get_path('module', 'argus_uurrooster').'/css/argus_uurrooster.css');
        drupal_add_js(drupal_get_path('module', 'argus_uurrooster').'/js/argus_uurrooster.js');
        
        return $block;
    }
}

/** 
 * Implement hook_theme()
 */
function argus_uurrooster_theme() {
    return array(
        'argus_uurrooster_filter_block' => array(
            'variables' => array(
                'content' => NULL,
                'popular_content' => NULL,
            ),
            'template' => 'templates/argus_uurrooster--filter_block',
        ),
        'argus_uurrooster_overview' => array(
            'template' => 'templates/argus_uurrooster--overview',
        ),
        'argus_uurrooster_week' => array(
            'template' => 'templates/argus_uurrooster--week',
        ),
        'argus_uurrooster_available_rooms' => array(
            'template' => 'templates/argus_uurrooster--available_rooms',
        ),
        'argus_uurrooster_occupied_rooms' => array(
            'template' => 'templates/argus_uurrooster--occupied_rooms',
        ),
        'argus_uurrooster_capacity_rooms' => array(
            'template' => 'templates/argus_uurrooster--capacity_rooms',
        ),
        'argus_uurrooster_available_lkr' => array(
            'template' => 'templates/argus_uurrooster--available_lkr',
        ),
        'argus_uurrooster_substitutes' => array(
            'template' => 'templates/argus_uurrooster--substitutes',
        ),
        'argus_uurrooster_supervisions' => array(
            'template' => 'templates/argus_uurrooster--supervisions',
        ),
        'argus_uurrooster_overview_substitutions_supervisions' => array(
            'template' => 'templates/argus_uurrooster--overview_substitutions_supervisions',
        ),
        'argus_uurrooster_assignments' => array(
            'template' => 'templates/argus_uurrooster--assignments',
        ),
        'argus_uurrooster_check_groups' => array(
            'template' => 'templates/argus_uurrooster--check_groups',
        ),
      );
}


/**
 * Implements hook_permission().
 */
function argus_uurrooster_permission() {
	return array(
		'access argus_uurrooster_schedules content' => array(
			'title' => t('Uurroosters bekijken'),
		),
		'access argus_uurrooster_assignments content' => array(
			'title' => t('Ambtsbevoegdheden bekijken'),
		),
		'access argus_uurrooster_check_groups content' => array(
			'title' => t('Controle uitvoeren van de leerkrachten van de klas vs. uurroosteropdracht van de leerkracht'),
		),
		'access argus_uurrooster_supervision_schedule content' => array(
			'title' => t('Toezichtenrooster bekijken'),
		),
		'access argus_uurrooster_substitution_schedule content' => array(
			'title' => t('Permanentierooster bekijken'),
		),
		'access argus_uurrooster_overview_substitutions_supervisions content' => array(
			'title' => t('Overzicht van de toezichten en permanenties bekijken'),
		),
		'access argus_uurrooster_available_lkr_schedule content' => array(
			'title' => t('Beschikbare leerkrachten bekijken'),
		),
		'access argus_uurrooster_available_rooms_schedule content' => array(
			'title' => t('Beschikbare lokalen bekijken'),
		),
		'access argus_uurrooster_room_occupation_schedule content' => array(
			'title' => t('Lokaalbezetting bekijken'),
		),
		'access argus_uurrooster_room_capacity_schedule content' => array(
			'title' => t('Capaciteit lokalen bekijken'),
		),
	);
}

/**
 * Catch form actions after submission of content editing
 */
function argus_uurrooster_form_alter(&$form, &$form_state, $form_id) {
	if($form_id === 'uurrooster_permanentie_node_form'){
		$form['actions']['submit']['#submit'][] ='argus_uurrooster_substitution_node_custom_submit';
	}
	if($form_id === 'uurrooster_toezicht_node_form'){
		$form['actions']['submit']['#submit'][] ='argus_uurrooster_supervision_node_custom_submit';
	}
}
function argus_uurrooster_substitution_node_custom_submit($form, &$form_state) {
	unset($_GET['destination']);
	unset($_REQUEST['edit']['destination']);
	
	global $base_url;
	$form_state['redirect'] = $base_url.'/uurrooster/permanentierooster';
}
function argus_uurrooster_supervision_node_custom_submit($form, &$form_state) {
	unset($_GET['destination']);
	unset($_REQUEST['edit']['destination']);
	
	global $base_url;
	$form_state['redirect'] = $base_url.'/uurrooster/toezichtenrooster';
}


/**
 * Page callback mapped to the url /uurrooster
 *
 * @return array
 */
function argus_uurrooster_overview() {
	if(!user_is_logged_in()){
		drupal_goto(base_path());
	}
	
	global $user, $base_url;
	
	// Check if $user is teacher
	foreach ($user->roles as $k => $r){
		if (array_key_exists($k, variable_get('argus_engine_roles_teacher'))){
			header('location:'.$base_url.'/uurrooster/leerkracht/'.$user->uid);
			exit;
		}
	}
	
	// Check if $user is pupil
	foreach ($user->roles as $k => $r){
		if (array_key_exists($k, variable_get('argus_engine_roles_pupil'))){
			header('location:'.$base_url.'/uurrooster/leerling/'.$user->uid);
			exit;
		}
	}
	
	return theme('argus_uurrooster_overview');
}

/**
 * Page callback mapped to the url /uurrooster/leerkracht
 *
 * @return array
 */
function argus_uurrooster_schedule_lkr($uid = NULL) {
    if (!isset($uid)) {
        global $user;
        $uid = $user->uid;
        if (!in_array('leerkracht',$user->roles)){
            $uid = 'no_schedule_available';
        }
    }
    if (is_numeric($uid)) {
        $currentUser = user_load($uid);
    } else {
        $currentUser = user_load_by_name($uid);
    }
    
    /* Check if 'currentUser' has value and exists */
    if ($currentUser) {
        $uid = $currentUser->uid;
        $title = argus_get_user_realname($uid);
    } else {
        $uid = NULL;
        $currentUser = NULL;
        $title = NULL;
    }
    
    return theme('argus_uurrooster_week', array(
        'uid' => $uid,
        'currentUser' => $currentUser,
        'title' => $title,
        )
    );
}

/**
 * Page callback mapped to the url /uurrooster/leerling
 *
 * @return array
 */
function argus_uurrooster_schedule_lln($uid = NULL) {
    $currentUser = NULL;
    if (!isset($uid)) {
        global $user;
        $uid = $user->uid;
        if (!in_array('leerkracht',$user->roles)){
            $uid = 'no_schedule_available';
        }
    }
    if (is_numeric($uid)) {
        $currentUser = user_load($uid);
    } else {
        $currentUser = user_load_by_name($uid);
    }
    
    $cid = NULL;
    $uid = NULL;
    $title = NULL;
    /* Check if 'currentUser' has value and exists */
    if ($currentUser) {
        $uid = $currentUser->uid;
        
        /* Get class of selected student */
        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', 'klas')
            ->propertyCondition('status', NODE_PUBLISHED)
            ->fieldCondition('field_klas_leerlingen', 'target_id', $uid, '=');
        $currentClass = $query->execute();
        if ($currentClass){
            $cid = key($currentClass['node']);
            $currentClass = (array) node_load($cid);
            $title = argus_get_user_realname($uid).' ('.$currentClass['title'].')';
        }
    }
    
    return theme('argus_uurrooster_week', array(
        'uid' => $uid,
        'cid' => $cid,
        'currentUser' => $currentUser,
        'title' => $title,
        )
    );
}

/**
 * Page callback mapped to the url /uurrooster/klas
 *
 * @return array
 */
function argus_uurrooster_schedule_classes($cid = NULL) {
    if (!isset($cid)) {
        global $user;
        if (in_array('leerling',$user->roles)){
            $query = new EntityFieldQuery();
            $query->entityCondition('entity_type', 'node')
                ->entityCondition('bundle', 'klas')
                ->propertyCondition('status', NODE_PUBLISHED)
                ->fieldCondition('field_klas_leerlingen', 'target_id', $user->id, '=');
            $currentClass = $query->execute();
            if ($currentClass){
            $currentClass = (array) node_load(key($currentClass));
                print dvm($currentClass);
            }
        }
    }
    if (is_numeric($cid)) {
        $currentClass = (array) node_load($cid);
    } else {
        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', 'klas')
            ->propertyCondition('status', NODE_PUBLISHED)
            ->fieldCondition('field_klas_sms_code', 'value', $cid, '=');
        $currentClass = $query->execute();
        if (count($currentClass)>0){
            $currentClass = (array) node_load(key($currentClass['node']));
        }
    }
    
    /* Check if 'currentClass' has value and exists */
    if ($currentClass) {
        $cid = $currentClass['nid'];
        $title = $currentClass['title'];
    } else {
        $uid = NULL;
        $title = NULL;
    }
    
    return theme('argus_uurrooster_week', array(
        'cid' => $cid,
        'title' => $title,
        )
    );
}

/**
 * Page callback mapped to the url /uurrooster/lokaal
 *
 * @return array
 */
function argus_uurrooster_schedule_rooms($rid = NULL) {
    $currentRoom = NULL;
    if (is_numeric($rid)) {
        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', 'lokaal')
            ->propertyCondition('status', NODE_PUBLISHED)
            ->propertyCondition('nid', $rid, '=');
        $currentRoom = $query->execute();
        if (count($currentRoom)>0) {
            $currentRoom = node_load(key($currentRoom['node']));
        }
    }
    
    if (!$currentRoom) {
        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', 'lokaal')
            ->propertyCondition('status', NODE_PUBLISHED)
            ->fieldCondition('field_lokaal_afkorting', 'value', $rid, '=');
        $currentRoom = $query->execute();
        if (count($currentRoom)>0){
            $currentRoom = node_load(key($currentRoom['node']));
        }
    }
    
    /* Check if 'currentUser' has value and exists */
    if ($currentRoom) {
        $rid = $currentRoom->nid;
        $title = $currentRoom->title;
    } else {
        $rid = NULL;
        $currentRoom = NULL;
        $title = NULL;
    }
    
    return theme('argus_uurrooster_week', array(
        'rid' => $rid,
        'currentRoom' => $currentRoom,
        'title' => $title,
        )
    );
}

/**
 * Page callback mapped to the url /uurrooster/beschikbare-lokalen
 *
 * @return array
 */
function argus_uurrooster_schedule_rooms_available() {
    return theme('argus_uurrooster_available_rooms');
}

/**
 * Page callback mapped to the url /uurrooster/lokaalbezetting
 *
 * @return array
 */
function argus_uurrooster_schedule_rooms_occupied() {
    return theme('argus_uurrooster_occupied_rooms');
}

/**
 * Page callback mapped to the url /uurrooster/capaciteit-lokalen
 *
 * @return array
 */
function argus_uurrooster_schedule_rooms_capacity() {
	drupal_add_css(drupal_get_path('module', 'argus_uurrooster').'/css/argus_uurrooster.css');
	drupal_add_js(drupal_get_path('module', 'argus_uurrooster').'/js/argus_uurrooster.js');
	
	$variables = array();
	$query = 'SELECT n.nid AS id, n.title AS name, lc.field_lokaal_capaciteit_value AS capacity, t.field_lokaal_type_value AS type, b.field_lokaal_beschrijving_value AS description '
			. 'FROM {node} AS n '
			. 'LEFT JOIN {field_data_field_lokaal_capaciteit} AS lc ON lc.entity_id = n.nid '
			. 'INNER JOIN {field_data_field_lokaal_type} AS t ON t.entity_id = n.nid '
			. 'INNER JOIN {field_data_field_lokaal_beschrijving} AS b ON b.entity_id = n.nid '
			. 'WHERE n.type = :type '
			. 'ORDER BY n.title';
	$variables['rooms'] = db_query($query, array(':type' => 'lokaal'))->fetchAllAssoc('id', PDO::FETCH_ASSOC);
	
	$query = 'SELECT n.nid AS id '
			. 'FROM {node} AS n '
			. 'WHERE n.type = :type';
	$variables['periods'] = db_query($query, array(':type' => 'uurrooster_periode'))->rowCount();
	
	foreach (array_keys($variables['rooms']) as $rid){
		$query = 'SELECT l.entity_id AS id, COUNT(field_uurrooster_les_klassen_target_id) AS lln '
				. 'FROM {field_data_field_uurrooster_les_lokaal} AS l '
				. 'INNER JOIN {field_data_field_uurrooster_les_klassen} AS k ON k.entity_id = l.entity_id '
				. 'INNER JOIN {field_data_field_klas_leerlingen} AS lln ON lln.entity_id = k.field_uurrooster_les_klassen_target_id '
				. 'WHERE l.field_uurrooster_les_lokaal_target_id = :lid GROUP BY l.entity_id';
		$variables['rooms'][$rid]['periods'] = db_query($query, array(':lid' => $rid))->fetchAllKeyed();
	}
	
    return theme('argus_uurrooster_capacity_rooms', $variables);
}

/**
 * Page callback mapped to the url /uurrooster/beschikbare-leerkrachten
 *
 * @return array
 */
function argus_uurrooster_schedule_lkr_available() {
    return theme('argus_uurrooster_available_lkr');
}

/**
 * Page callback mapped to the url /uurrooster/permanentierooster
 *
 * @return array
 */
function argus_uurrooster_substitutes() {
	drupal_add_css(drupal_get_path('module', 'argus_uurrooster').'/css/argus_uurrooster.css');
	drupal_add_js(drupal_get_path('module', 'argus_uurrooster').'/js/argus_uurrooster.js');
	
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'node')
		->entityCondition('bundle', 'uurrooster_periode')
		->propertyCondition('status', NODE_PUBLISHED)
		->fieldCondition('field_uurrooster_periode_dag', 'value', 1, '=');
	$data['periods'] = $query->execute();
	
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'node')
		->entityCondition('bundle', 'uurrooster_periode')
		->propertyCondition('status', NODE_PUBLISHED)
		->fieldOrderBy('field_uurrooster_periode_dag', 'value', 'DESC')
		->range(0,1);
	$data['days'] = $query->execute();

	if (count($data['days'])){
		$data['days'] = (array) node_load(key($data['days']['node']));
		$data['days'] = $data['days']['field_uurrooster_periode_dag'][LANGUAGE_NONE][0]['value'];
	}
	
	if (array_key_exists('s', $_GET)){
		$start = $_GET['s'];
		$queryStr = '?s='.$_GET['s'];
	} else {
		$start = date('d-m-Y');
		$queryStr = '';
	}
	$data['currentStartOfWeek'] = new DateTime($start);
	$data['currentStartOfWeek']->modify('+1 days');
	$data['currentStartOfWeek']->modify('last monday');
	
    return theme('argus_uurrooster_substitutes', $data);
}

/**
 * Page callback mapped to the url /uurrooster/toezichtenrooster
 *
 * @return array
 */
function argus_uurrooster_supervisions() {
    return theme('argus_uurrooster_supervisions');
}

/**
 * Page callback mapped to the url /uurrooster/beschikbare-lokalen
 *
 * @return array
 */
function argus_uurrooster_overview_substitutions_supervisions() {
	drupal_add_css(drupal_get_path('module', 'argus_uurrooster').'/css/argus_uurrooster.css');
	drupal_add_js(drupal_get_path('module', 'argus_uurrooster').'/js/argus_uurrooster.js');
	
	// Get user candidate substitutes
	$query = 'SELECT DISTINCT(u.uid) AS id '
			. 'FROM {users} AS u '
			. 'INNER JOIN {users_roles} AS ur ON u.uid = ur.uid '
			. 'WHERE u.uid NOT IN (:uidsNOK) AND ur.rid IN (:rids) AND status = 1';
	$data['availableSubstitutes'] = array_keys(db_query($query, array(
		':uidsNOK' => variable_get('argus_uurrooster_substitutions_exemptions'),
		':rids' => variable_get('argus_uurrooster_substitutions_roles'))
	)->fetchAllAssoc('id',PDO::FETCH_NAMED));

	// Get user candidate supervisors
	$query = 'SELECT DISTINCT(u.uid) AS id '
			. 'FROM {users} AS u '
			. 'INNER JOIN {users_roles} AS ur ON u.uid = ur.uid '
			. 'WHERE u.uid NOT IN (:uidsNOK) AND ur.rid IN (:rids) AND status = 1';
	$data['availableSupervisors'] = array_keys(db_query($query, array(
		':uidsNOK' => variable_get('argus_uurrooster_supervisions_exemptions'),
		':rids' => variable_get('argus_uurrooster_supervisions_roles'))
	)->fetchAllAssoc('id',PDO::FETCH_NAMED));

	$data['users'] = array();
	$userIds = array_merge($data['availableSubstitutes'],$data['availableSupervisors']);
	foreach ($userIds as $uid){
		$data['users'][$uid] = argus_get_user_realname($uid);
	}
	asort($data['users']);

	// Get all substitutions
	$query = 'SELECT DISTINCT(u.field_uurrooster_perm_vervanger_target_id) AS id '
			. 'FROM {field_data_field_uurrooster_perm_vervanger} AS u';
	$data['substitutes'] = array_keys(db_query($query)->fetchAllAssoc('id',PDO::FETCH_NAMED));

	// Get all supervisions, short and fixed
	$data['supervisions'] = array();
	foreach (array('kort','lang') as $tl){
		$data['supervisions'][$tl] = array();
		foreach (array('effectief','vervanger') as $tt){
			$query = 'SELECT u.field_uurrooster_toez_toezichter_target_id AS id, COUNT(u.field_uurrooster_toez_toezichter_target_id) AS amount '
					. 'FROM {field_data_field_uurrooster_toez_toezichter} AS u '
					. 'INNER JOIN {field_data_field_uurrooster_toez_locatie} AS l ON l.entity_id = u.entity_id '
					. 'INNER JOIN {field_data_field_uurrooster_toez_type} AS tt ON tt.entity_id = l.field_uurrooster_toez_locatie_target_id '
					. 'INNER JOIN {field_data_field_uurrooster_toez_lengte} AS tl ON tl.entity_id = l.field_uurrooster_toez_locatie_target_id '
					. 'WHERE tt.field_uurrooster_toez_type_value = :type AND tl.field_uurrooster_toez_lengte_value = :lengte '
					. 'GROUP BY u.field_uurrooster_toez_toezichter_target_id';
			$data['supervisions'][$tl][$tt] = db_query($query, array(':type' => $tt, ':lengte' => $tl))->fetchAllAssoc('id',PDO::FETCH_NAMED);
		}
	}

	return theme('argus_uurrooster_overview_substitutions_supervisions', $data);
}

/**
 * Page callback mapped to the url /uurrooster/ambtsbevoegdheden
 *
 * @return array
 */
function argus_uurrooster_assignments() {
	drupal_add_css(drupal_get_path('module', 'argus_uurrooster').'/css/argus_uurrooster.css');
	
	$default_user = array(
		'name' => null,
		'total' => 0,
		'A' => 0,
		'C' => 0,
		'T' => 0,
		'P' => 0,
		'S' => 0,
		'RGOK' => 0,
		'RBPT' => 0,
		'RICT' => 0,
		'index' => 0,
		'plage' => 0,
		'detail' => array(),
	);
	
	$data['totals'] = $default_user;
	$data['totals']['total'] = array('real' => 0, 'indexed' => 0);
	$data['totals']['RICT'] = array('real' => 0, 'indexed' => 0);
	$data['totals']['RGOK'] = array('real' => 0, 'indexed' => 0);
	$data['totals']['RBPT'] = array('real' => 0, 'indexed' => 0);
	
	// Get all prospected users
	$query = 'SELECT l.field_uurrooster_les_leerkracht_target_id AS id, COUNT(l.field_uurrooster_les_leerkracht_target_id) AS amount '
			. 'FROM {field_data_field_uurrooster_les_leerkracht} AS l '
			. 'GROUP BY l.field_uurrooster_les_leerkracht_target_id';
	$result = db_query($query)->fetchAllAssoc('id',PDO::FETCH_NAMED);
	$data['users'] = array();
	foreach ($result as $uid => $d){
		$data['users'][$uid]['name'] = argus_get_user_realname($uid);
		$data['users'][$uid]['detail'] = argus_uurrooster_get_assignment($uid);

		$data['users'][$uid]['total'] = $data['users'][$uid]['detail']['total']['indexed'];
		$data['users'][$uid]['A'] = array_sum($data['users'][$uid]['detail']['real']['A']);
		$data['users'][$uid]['C'] = array_sum($data['users'][$uid]['detail']['real']['C']);
		$data['users'][$uid]['T'] = array_sum($data['users'][$uid]['detail']['real']['T']);
		$data['users'][$uid]['P'] = array_sum($data['users'][$uid]['detail']['real']['P']);
		$data['users'][$uid]['S'] = array_sum($data['users'][$uid]['detail']['real']['S']);
		$data['users'][$uid]['RICT'] = array_sum($data['users'][$uid]['detail']['indexed']['RICT']);
		$data['users'][$uid]['RGOK'] = array_sum($data['users'][$uid]['detail']['indexed']['RGOK']);
		$data['users'][$uid]['RBPT'] = array_sum($data['users'][$uid]['detail']['indexed']['RBPT']);
		$data['users'][$uid]['index'] = $data['users'][$uid]['detail']['index'];
		$data['users'][$uid]['plage'] = $data['users'][$uid]['detail']['plage'];
		
		// Calculate totals
		$data['totals']['total']['real'] += $data['users'][$uid]['detail']['total']['real'];
		$data['totals']['total']['indexed'] += $data['users'][$uid]['detail']['total']['indexed'];
		$data['totals']['A'] += $data['users'][$uid]['A'];
		$data['totals']['C'] += $data['users'][$uid]['C'];
		$data['totals']['T'] += $data['users'][$uid]['T'];
		$data['totals']['P'] += $data['users'][$uid]['P'];
		$data['totals']['S'] += $data['users'][$uid]['S'];
		$data['totals']['RICT']['real'] += array_sum($data['users'][$uid]['detail']['real']['RICT']);
		$data['totals']['RICT']['indexed'] += array_sum($data['users'][$uid]['detail']['indexed']['RICT']);
		$data['totals']['RGOK']['real'] += array_sum($data['users'][$uid]['detail']['real']['RGOK']);
		$data['totals']['RGOK']['indexed'] += array_sum($data['users'][$uid]['detail']['indexed']['RGOK']);
		$data['totals']['RBPT']['real'] += array_sum($data['users'][$uid]['detail']['real']['RBPT']);
		$data['totals']['RBPT']['indexed'] += array_sum($data['users'][$uid]['detail']['indexed']['RBPT']);
		$data['totals']['plage'] += $data['users'][$uid]['plage'];
	}
	
	// Sort the data as requested
	$data['order'] = 'ASC';
	if (isset($_GET['order'])){
		if ($_GET['order'] == 'DESC'){
			$data['order'] = 'DESC';
		}
	}
	
	if ($data['order'] == 'ASC'){
		asort($data['users']);
	} else {
		arsort($data['users']);
	}
	
	// Set first index as sorting index
	$data['orderBy'] = 'name';
	if (isset($_GET['s'])){
		if (array_key_exists($_GET['s'], $default_user)){
			$data['orderBy'] = $_GET['s'];
		}
	}
	
	// Sort the array by given key
	argus_engine_sortBy($data['orderBy'], $data['users'], $data['order']);
	
    return theme('argus_uurrooster_assignments', $data);
}


/**
 * Page callback mapped to the url /uurrooster/controle-groepen
 *
 * @return array
 */
function argus_uurrooster_check_groups() {
	drupal_add_css(drupal_get_path('module', 'argus_uurrooster').'/css/argus_uurrooster.css');
	
	$data = array();

	$roles = field_info_field('field_user_sms_basisrol');
	$roles = $roles['settings']['allowed_values'];
	
	/* START SITUATION */
	
	// Get all teachers as defined by their role
	$users = argus_engine_get_users_with_role('leerkracht');
	foreach($users as $u){
		if (array_key_exists(LANGUAGE_NONE, $u->field_user_sms_basisrol)){
			$role = $roles[$u->field_user_sms_basisrol[LANGUAGE_NONE][0]['value']];
		} else {
			$role = 'Onbekend';
		}
		$data[$u->uid] = array(
			'name' => argus_get_user_realname($u->uid),
			'role' => $role,
			'scheduled_groups' => array(),
			'assigned_groups' => array(),
		);
	}
	
	/* SCHEDULED SITUATION - LIVE */
	
	// Get all teachers and their groups as defined in the schedules ('uurroosters')
	$query = 'SELECT l.field_uurrooster_les_leerkracht_target_id AS uid, k.field_uurrooster_les_klassen_target_id AS gid ' .
			'FROM {field_data_field_uurrooster_les_leerkracht} AS l ' .
			'INNER JOIN {field_data_field_uurrooster_les_klassen} AS k ON l.entity_id = k.entity_id ' .
			'INNER JOIN {node} AS n ON n.nid = l.entity_id ' .
			'WHERE n.status';
	$users = db_query($query)->fetchAll();
	foreach($users as $ug){
		if (array_key_exists($ug->uid, $data)){
			if (!in_array($ug->gid, $data[$ug->uid]['scheduled_groups'])){
				$data[$ug->uid]['scheduled_groups'][] = $ug->gid;
			}
		} else {
			$u = user_load($ug->uid);
			if (array_key_exists(LANGUAGE_NONE, $u->field_user_sms_basisrol)){
				$role = $roles[$u->field_user_sms_basisrol[LANGUAGE_NONE][0]['value']];
			} else {
				$role = 'Onbekend';
			}
			$data[$ug->uid] = array(
				'name' => argus_get_user_realname($ug->uid),
				'role' => $role,
				'scheduled_groups' => array($ug->gid),
				'assigned_groups' => array(),
			);
		}
	}
	
	/* SYNCED SITUATION - SMARTSCHOOL */
	
	// Get all teachers and their groups as defined in the schedules ('uurroosters')
	$query = 'SELECT l.field_klas_leerkrachten_target_id AS uid, l.entity_id AS gid ' .
			'FROM {field_data_field_klas_leerkrachten} AS l ' .
			'INNER JOIN {node} AS n ON n.nid = l.entity_id ' .
			'WHERE n.status';
	$users = db_query($query)->fetchAll();
	foreach($users as $d){
		if (array_key_exists($d->uid, $data)){
			if (!in_array($d->gid, $data[$d->uid]['assigned_groups'])){
				$data[$d->uid]['assigned_groups'][] = $d->gid;
			}
		} else {
			$u = user_load($d->uid);
			if (array_key_exists(LANGUAGE_NONE, $u->field_user_sms_basisrol)){
				$role = $roles[$u->field_user_sms_basisrol[LANGUAGE_NONE][0]['value']];
			} else {
				$role = 'Onbekend';
			}
			$data[$d->uid] = array(
				'name' => argus_get_user_realname($d->uid),
				'role' => $role,
				'scheduled_groups' => array(),
				'assigned_groups' => array( $d->gid ),
			);
		}
	}
	
	// Sort the array by given key
	argus_engine_sortBy('name', $data);
	
    return theme('argus_uurrooster_check_groups', array('users' => $data));
}


/**
 * Custom module functionality
 */

/**
 * Retrieve details from lesson about teachers/class/rooms/substitutions.
 */
function argus_uurrooster_lesson_retrieve(){
	global $user, $base_url;
	
	if (array_key_exists('nid', $_POST)){
		$nid = $_POST['nid'];
	}
	if (array_key_exists('t', $_POST)){
		$type = $_POST['t'];
	}
	
	if (isset($nid)) {
        $lesson = (array) node_load($nid);
        
        switch ($lesson['type']){
        	case 'uurrooster_periode':
        		if ($type != 'free'){
	        		$query = new EntityFieldQuery();
	        		$query->entityCondition('entity_type', 'node')
	        		->entityCondition('bundle', 'uurrooster_permanentie')
	        		->propertyCondition('status', NODE_PUBLISHED)
	        		->fieldCondition('field_uurrooster_perm_periode', 'target_id', $nid, '=');
	        		$currentSubstitutions = $query->execute();
        		} else {
        			$currentSubstitutions = array();
        		}
        		
        		// Edit and delete existing substitutions
        		if (count($currentSubstitutions)>0 && (user_access('edit any uurrooster_permanentie content') || user_access('delete any uurrooster_permanentie content'))){
        			foreach ($currentSubstitutions['node'] as $k => $cs){
        				$currentSubstitution = (array) node_load($k);
        				$currentSubstitute = $currentSubstitution['field_uurrooster_perm_vervanger'][LANGUAGE_NONE][0]['target_id'];
        				echo '<div><h4><a href="'.$base_url.'/uurrooster/leerkracht/'.$currentSubstitute.'">'.argus_get_user_realname($currentSubstitute).'</a></h4>';
        			    $actions = array();
        			    if (user_access('edit any uurrooster_permanentie content')){
        					$actions[] = '<a href="'.$base_url.'/node/'.$k.'/edit" style="font-size: smaller;">bewerken</a>';
        				}
        			    if (user_access('delete any uurrooster_permanentie content')){
        					$actions[] = '<a href="#" onclick="javascript: argus_uurrooster_substitution_delete('.$k.');" style="font-size: smaller;">verwijderen</a>';
        			    }
        				echo implode(' - ', $actions).'</div>';
        			}
        		} elseif (count($currentSubstitutions)==0 && user_access('create uurrooster_permanentie content')){
        			print '<a id="argus_uurrooster_overloaded_toggler" href="#" onclick="javascript: argus_uurrooster_overloaded_toggle();">toon de rode gebruikers</a><hr />';
					
					$day = $lesson['field_uurrooster_periode_dag'][LANGUAGE_NONE][0]['value'];
        			$period = $lesson['field_uurrooster_periode_periode'][LANGUAGE_NONE][0]['value'];
        			
        			// 1. Get unavailable users with lesson for this period
        			$query = 'SELECT DISTINCT(l.field_uurrooster_les_leerkracht_target_id) AS id '
        					. 'FROM {field_data_field_uurrooster_les_periode} AS p '
        					. 'INNER JOIN {field_data_field_uurrooster_les_leerkracht} AS l ON l.entity_id = p.entity_id '
        					. 'WHERE p.field_uurrooster_les_periode_target_id = :pid';
        			$unavailableTeachers = array_keys(db_query($query, array(':pid' => $nid))->fetchAllAssoc('id',PDO::FETCH_NAMED));
        			
        			// 2. Get users with a registered substitution
        			//TODO: Create setup parameter for this, amount of maximum substitutions (variable_get('argus_uurrooster_substitutions_maximum'))
        			$query = 'SELECT DISTINCT(l.field_uurrooster_perm_vervanger_target_id) AS id '
	        				. 'FROM {field_data_field_uurrooster_perm_vervanger} AS l';
        			$substituteTeachers = array_keys(db_query($query)->fetchAllAssoc('id',PDO::FETCH_NAMED));
        			//TODO: set users which can do more than max amount
        			$substituteTeachers = array();
        			
        			// 3. Get users with prior lesson(s) before this substitution
        			if ($period>1){
	        			$query = 'SELECT DISTINCT(l.field_uurrooster_les_leerkracht_target_id) AS id '
	        					. 'FROM {field_data_field_uurrooster_les_periode} AS p '
	        					. 'INNER JOIN {field_data_field_uurrooster_les_leerkracht} AS l ON l.entity_id = p.entity_id '
	        					. 'INNER JOIN {field_data_field_uurrooster_periode_periode} AS pp ON pp.entity_id = p.field_uurrooster_les_periode_target_id '
	        					. 'INNER JOIN {field_data_field_uurrooster_periode_dag} AS pd ON pd.entity_id = p.field_uurrooster_les_periode_target_id '
	        					. 'WHERE pp.field_uurrooster_periode_periode_value = :period '
	        					. 'AND pd.field_uurrooster_periode_dag_value = :day ';
	        			$availableTeachersPrior = array_keys(db_query($query, array(':period' => $period-1, ':day' => $day))->fetchAllAssoc('id',PDO::FETCH_NAMED));
        			}
        			
        			// 4. Get users with following lesson(s) after this substitution
        			if ($period<8){ //TODO Get max value from database (replace fixed '8')
	        			$query = 'SELECT DISTINCT(l.field_uurrooster_les_leerkracht_target_id) AS id '
	        					. 'FROM {field_data_field_uurrooster_les_periode} AS p '
	        					. 'INNER JOIN {field_data_field_uurrooster_les_leerkracht} AS l ON l.entity_id = p.entity_id '
	        					. 'INNER JOIN {field_data_field_uurrooster_periode_periode} AS pp ON pp.entity_id = p.field_uurrooster_les_periode_target_id '
	        					. 'INNER JOIN {field_data_field_uurrooster_periode_dag} AS pd ON pd.entity_id = p.field_uurrooster_les_periode_target_id '
	        					. 'WHERE pp.field_uurrooster_periode_periode_value = :period '
	        					. 'AND pd.field_uurrooster_periode_dag_value = :day ';
	        			$availableTeachersAfter = array_keys(db_query($query, array(':period' => $period+1, ':day' => $day))->fetchAllAssoc('id',PDO::FETCH_NAMED));
        			}
        			
        			// Get candidate substitute users
        			$query = 'SELECT DISTINCT(u.uid) AS id '
        					. 'FROM {users} AS u '
        					. 'INNER JOIN {users_roles} AS ur ON u.uid = ur.uid '
        					. 'WHERE u.uid NOT IN (:uidsNOK) AND ur.rid IN (:rids) AND status = 1';
        			$availableTeachers = array_keys(db_query($query, array(
        				':uidsNOK' => array_merge($unavailableTeachers,$substituteTeachers,variable_get('argus_uurrooster_substitutions_exemptions')),
        				':rids' => variable_get('argus_uurrooster_substitutions_roles'))
        			)->fetchAllAssoc('id',PDO::FETCH_NAMED));

	        		// A. List all candidate substitute users with a prior and following lesson
	        		if (isset($availableTeachersPrior) && isset($availableTeachersAfter)){
	        			$foundUsers = array();
	        			foreach ($availableTeachers as $k => $t){
	        				if (in_array($t, $availableTeachersPrior) && in_array($t, $availableTeachersAfter)){
	        					$query = 'SELECT DISTINCT(l.entity_id) AS lessons '
	        							. 'FROM {field_data_field_uurrooster_les_leerkracht} AS l '
        								. 'WHERE l.field_uurrooster_les_leerkracht_target_id = :uid ';
	        					$totalLessons = count(db_query($query, array(':uid' => $t))->fetchCol());
	        					
	        					$uname = argus_get_user_realname($t);
	        					$foundUsers[$uname] = array(
	        						'nid' => $nid,
	        						'uid' => $t,
	        						'name' => $uname,
	        						'title' => $uname.' ('.$totalLessons.')',
	        					);
	        					
	        					unset($availableTeachers[$k]);
	        				}
	        			}
	        			if (count($foundUsers)){
	        				ksort($foundUsers);
	        				print '<h3>Niveau 1</h3><div style="font-size: smaller">(les voor en na deze periode)</div><ul>';
	        				foreach ($foundUsers as $u){
	        				
	        					// Get current status for this user
	        					// TODO: Create function for calculating overload, depending on new calculation (ref. roles - 21-11-2015)
	        					$style = '';
								
								$query = 'SELECT DISTINCT(l.entity_id) AS lessons '
										. 'FROM {field_data_field_uurrooster_les_leerkracht} AS l '
										. 'WHERE l.field_uurrooster_les_leerkracht_target_id = :uid ';
								$totalLessons = count(db_query($query, array(':uid' => $u['uid']))->fetchCol());
								
								foreach (array('kort','lang') as $tl){
	        						foreach (array('effectief','vervanger') as $tt){
	        							$query = 'SELECT u.entity_id AS id '
	        									. 'FROM {field_data_field_uurrooster_toez_toezichter} AS u '
	        									. 'INNER JOIN {field_data_field_uurrooster_toez_locatie} AS l ON l.entity_id = u.entity_id '
	        									. 'INNER JOIN {field_data_field_uurrooster_toez_lengte} AS tl ON tl.entity_id = l.field_uurrooster_toez_locatie_target_id '
	        									. 'INNER JOIN {field_data_field_uurrooster_toez_type} AS tt ON tt.entity_id = l.field_uurrooster_toez_locatie_target_id '
	        									. 'WHERE u.field_uurrooster_toez_toezichter_target_id = :uid AND tl.field_uurrooster_toez_lengte_value = :ll AND tt.field_uurrooster_toez_type_value = :tt';
	        							$totalSupervisions[$tl][$tt] = count(db_query($query, array(':uid' => $u['uid'], ':ll' => $tl, ':tt' => $tt))->fetchAll());
	        							$totalLessons .= ', '.$totalSupervisions[$tl][$tt];
	        						}
	        					}
	        					$query = 'SELECT * '
	        							. 'FROM {field_data_field_uurrooster_perm_vervanger} AS l '
	        							. 'WHERE field_uurrooster_perm_vervanger_target_id = :uid';
	        					$subs = count(db_query($query, array(':uid' => $u['uid']))->fetchAll());
	        					if ($totalSupervisions['kort']['effectief']>2 ||
	        							$totalSupervisions['lang']['effectief']>1 ||
	        							($totalSupervisions['kort']['effectief']>1 && $totalSupervisions['lang']['effectief']>0) ||
	        							($totalSupervisions['kort']['effectief']>0 && $totalSupervisions['lang']['vervanger']>0) ||
	        							$totalSupervisions['kort']['vervanger']>3 ||
	        							$totalSupervisions['lang']['vervanger']>2 ||
	        							$subs){ //TODO: check against maximum
	        						$style = 'style="color: red !important; display: none;" class="argus_uurrooster_overloaded"';
	        					}
	        					
       							print '<li '.$style.'>';
	        					switch ($type){
	        						case 'free':
	        							print '<a href="'.base_path().'uurrooster/leerkracht/'.$u['uid'].'" target="_blank" title="Leerkracht (aantal lesuren) - klik om deze gebruiker toe te wijzen aan het geselecteerde uur">';
	        							print $u['title'];
	        							print '</a>';
	        							break;
	        						default:
	        							print '<a href="#" onclick="javascript: argus_uurrooster_substitution_create('.$u['uid'].','.$u['nid'].');" title="Leerkracht (aantal lesuren) - klik om deze gebruiker toe te wijzen aan het geselecteerde uur">';
	        							print $u['name'].'<div style="font-size: smaller; line-height: 1em;">('.$totalLessons.')</div>';
	        							print '</a>';
	        							break;
	        					}
       							print '</li>';
	        				}
	        				print '</ul>';
	        			}
	        		}
	        		
	        		// B. List all candidate substitute users with a prior lesson
	        		if (isset($availableTeachersPrior)){
		        		$foundUsers = array();
		        		foreach ($availableTeachers as $k => $t){
		        			if (in_array($t, $availableTeachersPrior)){
	        					$query = 'SELECT DISTINCT(l.entity_id) AS lessons '
	        							. 'FROM {field_data_field_uurrooster_les_leerkracht} AS l '
        								. 'WHERE l.field_uurrooster_les_leerkracht_target_id = :uid ';
	        					$totalLessons = count(db_query($query, array(':uid' => $t))->fetchCol());
		        			
	        					$uname = argus_get_user_realname($t);
	        					$foundUsers[$uname] = array(
	        						'nid' => $nid,
	        						'uid' => $t,
	        						'name' => $uname,
	        						'title' => $uname.' ('.$totalLessons.')',
	        					);
	        					
	        					unset($availableTeachers[$k]);
	        				}
	        			}
	        			if (count($foundUsers)){
	        				ksort($foundUsers);
	        				print '<h4>Niveau 2</h4><div style="font-size: smaller">(les voor deze periode)</div><ul>';
	        				foreach ($foundUsers as $u){
	        				
	        					// Get current status for this user
	        					// TODO: Create function for calculating overload, depending on new calculation (ref. roles - 21-11-2015)
	        					$style = '';
								
								$query = 'SELECT DISTINCT(l.entity_id) AS lessons '
										. 'FROM {field_data_field_uurrooster_les_leerkracht} AS l '
										. 'WHERE l.field_uurrooster_les_leerkracht_target_id = :uid ';
								$totalLessons = count(db_query($query, array(':uid' => $u['uid']))->fetchCol());
								
								foreach (array('kort','lang') as $tl){
	        						foreach (array('effectief','vervanger') as $tt){
	        							$query = 'SELECT u.entity_id AS id '
	        									. 'FROM {field_data_field_uurrooster_toez_toezichter} AS u '
	        									. 'INNER JOIN {field_data_field_uurrooster_toez_locatie} AS l ON l.entity_id = u.entity_id '
	        									. 'INNER JOIN {field_data_field_uurrooster_toez_lengte} AS tl ON tl.entity_id = l.field_uurrooster_toez_locatie_target_id '
	        									. 'INNER JOIN {field_data_field_uurrooster_toez_type} AS tt ON tt.entity_id = l.field_uurrooster_toez_locatie_target_id '
	        									. 'WHERE u.field_uurrooster_toez_toezichter_target_id = :uid AND tl.field_uurrooster_toez_lengte_value = :ll AND tt.field_uurrooster_toez_type_value = :tt';
	        							$totalSupervisions[$tl][$tt] = count(db_query($query, array(':uid' => $u['uid'], ':ll' => $tl, ':tt' => $tt))->fetchAll());
	        							$totalLessons .= ', '.$totalSupervisions[$tl][$tt];
	        						}
	        					}
	        					$query = 'SELECT * '
	        							. 'FROM {field_data_field_uurrooster_perm_vervanger} AS l '
	        							. 'WHERE field_uurrooster_perm_vervanger_target_id = :uid';
	        					$subs = count(db_query($query, array(':uid' => $u['uid']))->fetchAll());
	        					if ($totalSupervisions['kort']['effectief']>2 ||
	        							$totalSupervisions['lang']['effectief']>1 ||
	        							($totalSupervisions['kort']['effectief']>1 && $totalSupervisions['lang']['effectief']>0) ||
	        							($totalSupervisions['kort']['effectief']>0 && $totalSupervisions['lang']['vervanger']>0) ||
	        							$totalSupervisions['kort']['vervanger']>3 ||
	        							$totalSupervisions['lang']['vervanger']>2 ||
	        							$subs){ //TODO: check against maximum
	        						$style = 'style="color: red !important; display: none;" class="argus_uurrooster_overloaded"';
	        					}
	        					
       							print '<li '.$style.'>';
	        					switch ($type){
	        						case 'free':
	        							print '<a href="'.base_path().'uurrooster/leerkracht/'.$u['uid'].'" target="_blank" title="Leerkracht (aantal lesuren) - klik om deze gebruiker toe te wijzen aan het geselecteerde uur">';
	        							print $u['title'];
	        							print '</a>';
	        							break;
	        						default:
	        							print '<a href="#" onclick="javascript: argus_uurrooster_substitution_create('.$u['uid'].','.$u['nid'].');" title="Leerkracht (aantal lesuren) - klik om deze gebruiker toe te wijzen aan het geselecteerde uur">';
	        							print $u['name'].'<div style="font-size: smaller; line-height: 1em;">('.$totalLessons.')</div>';
	        							print '</a>';
	        							break;
	        					}
       							print '</li>';
	        				}
	        				print '</ul>';
	        			}
	        		}
	        		
	        		// C. List all candidate substitute users with a following lesson
	        		if (isset($availableTeachersAfter)){
		        		$foundUsers = array();
		        		foreach ($availableTeachers as $k => $t){
		        			if (in_array($t, $availableTeachersAfter)){
	        					$query = 'SELECT DISTINCT(l.entity_id) AS lessons '
	        							. 'FROM {field_data_field_uurrooster_les_leerkracht} AS l '
        								. 'WHERE l.field_uurrooster_les_leerkracht_target_id = :uid ';
	        					$totalLessons = count(db_query($query, array(':uid' => $t))->fetchCol());
		        			
	        					$uname = argus_get_user_realname($t);
	        					$foundUsers[$uname] = array(
	        						'nid' => $nid,
	        						'uid' => $t,
	        						'name' => $uname,
	        						'title' => $uname.' ('.$totalLessons.')',
	        					);
	        					
	        					unset($availableTeachers[$k]);
	        				}
	        			}
	        			if (count($foundUsers)){
	        				ksort($foundUsers);
	        				print '<h4>Niveau 3</h4><div style="font-size: smaller">(les na deze periode)</div><ul>';
	        				foreach ($foundUsers as $u){
	        					// Get current status for this user
	        					// TODO: Create function for calculating overload, depending on new calculation (ref. roles - 21-11-2015)
	        					$style = '';
								
								$query = 'SELECT DISTINCT(l.entity_id) AS lessons '
										. 'FROM {field_data_field_uurrooster_les_leerkracht} AS l '
										. 'WHERE l.field_uurrooster_les_leerkracht_target_id = :uid ';
								$totalLessons = count(db_query($query, array(':uid' => $u['uid']))->fetchCol());
								
								foreach (array('kort','lang') as $tl){
	        						foreach (array('effectief','vervanger') as $tt){
	        							$query = 'SELECT u.entity_id AS id '
	        									. 'FROM {field_data_field_uurrooster_toez_toezichter} AS u '
	        									. 'INNER JOIN {field_data_field_uurrooster_toez_locatie} AS l ON l.entity_id = u.entity_id '
	        									. 'INNER JOIN {field_data_field_uurrooster_toez_lengte} AS tl ON tl.entity_id = l.field_uurrooster_toez_locatie_target_id '
	        									. 'INNER JOIN {field_data_field_uurrooster_toez_type} AS tt ON tt.entity_id = l.field_uurrooster_toez_locatie_target_id '
	        									. 'WHERE u.field_uurrooster_toez_toezichter_target_id = :uid AND tl.field_uurrooster_toez_lengte_value = :ll AND tt.field_uurrooster_toez_type_value = :tt';
	        							$totalSupervisions[$tl][$tt] = count(db_query($query, array(':uid' => $u['uid'], ':ll' => $tl, ':tt' => $tt))->fetchAll());
	        							$totalLessons .= ', '.$totalSupervisions[$tl][$tt];
	        						}
	        					}
	        					$query = 'SELECT * '
	        							. 'FROM {field_data_field_uurrooster_perm_vervanger} AS l '
	        							. 'WHERE field_uurrooster_perm_vervanger_target_id = :uid';
	        					$subs = count(db_query($query, array(':uid' => $u['uid']))->fetchAll());
	        					if ($totalSupervisions['kort']['effectief']>2 ||
	        							$totalSupervisions['lang']['effectief']>1 ||
	        							($totalSupervisions['kort']['effectief']>1 && $totalSupervisions['lang']['effectief']>0) ||
	        							($totalSupervisions['kort']['effectief']>0 && $totalSupervisions['lang']['vervanger']>0) ||
	        							$totalSupervisions['kort']['vervanger']>3 ||
	        							$totalSupervisions['lang']['vervanger']>2 ||
	        							$subs){ //TODO: check against maximum
	        						$style = 'style="color: red !important; display: none;" class="argus_uurrooster_overloaded"';
	        					}
	        					
       							print '<li '.$style.'>';
	        					switch ($type){
	        						case 'free':
	        							print '<a href="'.base_path().'uurrooster/leerkracht/'.$u['uid'].'" target="_blank" title="Leerkracht (aantal lesuren) - klik om deze gebruiker toe te wijzen aan het geselecteerde uur">';
	        							print $u['title'];
	        							print '</a>';
	        							break;
	        						default:
	        							print '<a href="#" onclick="javascript: argus_uurrooster_substitution_create('.$u['uid'].','.$u['nid'].');" title="Leerkracht (aantal lesuren) - klik om deze gebruiker toe te wijzen aan het geselecteerde uur">';
	        							print $u['name'].'<div style="font-size: smaller; line-height: 1em;">('.$totalLessons.')</div>';
	        							print '</a>';
	        							break;
	        					}
       							print '</li>';
	        				}
	        				print '</ul>';
	        			}
	        		}
	        		
	        		// D. List all other candidate substitute users
        			$foundUsers = array();
	        		foreach ($availableTeachers as $k => $t){
	        			$query = 'SELECT DISTINCT(l.entity_id) AS lessons '
	        					. 'FROM {field_data_field_uurrooster_les_leerkracht} AS l '
        						. 'WHERE l.field_uurrooster_les_leerkracht_target_id = :uid ';
	        			$totalLessons = count(db_query($query, array(':uid' => $t))->fetchCol());
	        			
        				$uname = argus_get_user_realname($t);
        				$foundUsers[$uname] = array(
        					'nid' => $nid,
        					'uid' => $t,
	        				'name' => $uname,
        					'title' => $uname.' ('.$totalLessons.')',
        				);
	        		}
        			
        			if (count($foundUsers)){
	        			ksort($foundUsers);
	        			print '<h4>Niveau 4</h4><div style="font-size: smaller">(geen les voor of na deze periode)</div><ul>';
	        			foreach ($foundUsers as $u){
       						print '<li '.$style.'>';
	        				// Get current status for this user
	        				// TODO: Create function for calculating overload, depending on new calculation (ref. roles - 21-11-2015)
	        				$style = '';
						
							$query = 'SELECT DISTINCT(l.entity_id) AS lessons '
									. 'FROM {field_data_field_uurrooster_les_leerkracht} AS l '
									. 'WHERE l.field_uurrooster_les_leerkracht_target_id = :uid ';
							$totalLessons = count(db_query($query, array(':uid' => $u['uid']))->fetchCol());
							
							foreach (array('kort','lang') as $tl){
	        					foreach (array('effectief','vervanger') as $tt){
	        						$query = 'SELECT u.entity_id AS id '
	        								. 'FROM {field_data_field_uurrooster_toez_toezichter} AS u '
	        								. 'INNER JOIN {field_data_field_uurrooster_toez_locatie} AS l ON l.entity_id = u.entity_id '
	        								. 'INNER JOIN {field_data_field_uurrooster_toez_lengte} AS tl ON tl.entity_id = l.field_uurrooster_toez_locatie_target_id '
	        								. 'INNER JOIN {field_data_field_uurrooster_toez_type} AS tt ON tt.entity_id = l.field_uurrooster_toez_locatie_target_id '
	        								. 'WHERE u.field_uurrooster_toez_toezichter_target_id = :uid AND tl.field_uurrooster_toez_lengte_value = :ll AND tt.field_uurrooster_toez_type_value = :tt';
	        						$totalSupervisions[$tl][$tt] = count(db_query($query, array(':uid' => $u['uid'], ':ll' => $tl, ':tt' => $tt))->fetchAll());
	        						$totalLessons .= ', '.$totalSupervisions[$tl][$tt];
	        					}
	        				}
        					$query = 'SELECT * '
        							. 'FROM {field_data_field_uurrooster_perm_vervanger} AS l '
        							. 'WHERE field_uurrooster_perm_vervanger_target_id = :uid';
        					$subs = count(db_query($query, array(':uid' => $u['uid']))->fetchAll());
	        				if ($totalSupervisions['kort']['effectief']>2 ||
	        						$totalSupervisions['lang']['effectief']>1 ||
	        						($totalSupervisions['kort']['effectief']>1 && $totalSupervisions['lang']['effectief']>0) ||
	       							($totalSupervisions['kort']['effectief']>0 && $totalSupervisions['lang']['vervanger']>0) ||
	       							$totalSupervisions['kort']['vervanger']>3 ||
	       							$totalSupervisions['lang']['vervanger']>2 ||
	        						$subs){ //TODO: check against maximum
	       						$style = 'style="color: red !important; display: none;" class="argus_uurrooster_overloaded"';
	       					}
       							
	        				switch ($type){
	        					case 'free':
	        						print '<a href="'.base_path().'uurrooster/leerkracht/'.$u['uid'].'" target="_blank" title="Leerkracht (aantal lesuren) - klik om deze gebruiker toe te wijzen aan het geselecteerde uur">';
	        						print $u['title'];
	        						print '</a>';
	        						break;
	        					default:
	        						print '<a href="#" onclick="javascript: argus_uurrooster_substitution_create('.$u['uid'].','.$u['nid'].');" title="Leerkracht (aantal lesuren) - klik om deze gebruiker toe te wijzen aan het geselecteerde uur">';
	        						print $u['name'].'<div style="font-size: smaller; line-height: 1em;">('.$totalLessons.')</div>';
	        						print '</a>';
	        						break;
	        				}
       						print '</li>';
	        			}
	        			print '</ul>';
	        		}
        		}
        		break;
        	case 'uurrooster_toezicht':
        		print 'ok';
        		break;
        	default:
        		$query = new EntityFieldQuery();
        		$query->entityCondition('entity_type', 'node')
        		->entityCondition('bundle', 'uurrooster_les')
        		->propertyCondition('status', NODE_PUBLISHED)
        		->fieldCondition('field_uurrooster_les_periode', 'target_id', $lesson['field_uurrooster_les_periode'][LANGUAGE_NONE][0]['target_id'], '=');
        		
        		switch ($type){
        			case 'leerkracht':
		        		foreach ($lesson['field_uurrooster_les_leerkracht'][LANGUAGE_NONE] as $lessonDbl) {
		        			$query->fieldCondition('field_uurrooster_les_leerkracht', 'target_id', $lessonDbl['target_id'], '=');
		        		}
        				break;
        			case 'lokaal':
		        		foreach ($lesson['field_uurrooster_les_lokaal'][LANGUAGE_NONE] as $lessonDbl) {
		        			$query->fieldCondition('field_uurrooster_les_lokaal', 'target_id', $lessonDbl['target_id'], '=');
		        		}
        				break;
        			case 'klas':
		        		foreach ($lesson['field_uurrooster_les_klassen'][LANGUAGE_NONE] as $lessonDbl) {
		        			$query->fieldCondition('field_uurrooster_les_klassen', 'target_id', $lessonDbl['target_id'], '=');
		        		}
        				break;
        		}
        		$lessons = $query->execute();
        		
        		if (count($lessons) > 0) {
        			foreach ($lessons['node'] as $key => $lesson){
        				$lesson = (array) node_load($key);
        				if (count($lesson['field_uurrooster_les_vak'])>0) {
        					$currentSubject = (array) node_load($lesson['field_uurrooster_les_vak'][LANGUAGE_NONE][0]['target_id']);
        					
        					if (array_key_exists(LANGUAGE_NONE, $currentSubject['field_vak_beschrijving'])){
	        					/* Layout fix for long names */
	        					$currentSubject = implode(' / ', explode('/', $currentSubject['field_vak_beschrijving'][LANGUAGE_NONE][0]['value']));
	        		
	        					print '<div style="font-weight: bold;">'.$currentSubject.'</div>';
        					}
        				}
        				if (count($lesson['field_uurrooster_les_leerkracht'])>0) {
        					print '<div style="font-weight: bolder;"><a href="/user/'.$lesson['field_uurrooster_les_leerkracht'][LANGUAGE_NONE][0]['target_id'].'">'.argus_get_user_realname($lesson['field_uurrooster_les_leerkracht'][LANGUAGE_NONE][0]['target_id']).'</a></div>';
        				}
        				if (count($lesson['field_uurrooster_les_lokaal'])>0) {
        					$currentRoom = node_load($lesson['field_uurrooster_les_lokaal'][LANGUAGE_NONE][0]['target_id']);
        					
        					print '<div style="font-style: italic; font-size: 0.9em;">'.$currentRoom->title.'</div>';
        				}
        				
        				print '<div style="height: 2px; background-color: #FF8000; margin: 10px 0px;"></div>';
        				
	        			if (count($lesson['field_uurrooster_les_klassen'])>0) {
	        				end($lesson['field_uurrooster_les_klassen'][LANGUAGE_NONE]);
	        				$lastClass = key($lesson['field_uurrooster_les_klassen'][LANGUAGE_NONE]);
	        				foreach ($lesson['field_uurrooster_les_klassen'][LANGUAGE_NONE] as $c => $class) {
	        					$class = (array) node_load($class['target_id']);
	        					print '<div><a id="class_'.$lesson['nid'].'_'.$class['nid'].'" class="argus_uurrooster_student_toggler" onclick="argus_uurrooster_toggle_students(\''.$lesson['nid'].'_'.$class['nid'].'\')">+</a> <a href="/node/'.$class['nid'].'">'.$class['title'].'</a></div>';
	        		
	        					print '<div class="argus_uurrooster_student_list" id="students_'.$lesson['nid'].'_'.$class['nid'].'">'.$class['field_klas_omschrijving'][LANGUAGE_NONE][0]['value'];
	        		
	        					/* Fetch students for this class */
	        					$students = (array) node_load($class['nid']);
	        					print '<ol>';
	        					foreach ($students['field_klas_leerlingen'][LANGUAGE_NONE] as $student) {
	        						print '<li><a href="/user/'.$student['target_id'].'">'.argus_get_user_realname($student['target_id']).'</a></li>';
	        					}
	        					print '</ol></div>';
	        		
	        					if ($c != $lastClass) {
	        						print '<div style="height: 1px; background-color: #FFBF00; margin: 3px 0px;"></div>';
	        					}
	        				}
	        			}
	        			
	        			print '<br />';
        			}
        		} else {
        			print 0;
        		}
        }
    } else {
        print 0;
    }
    exit;
}

/**
 * Retrieve details of free rooms.
 */
function argus_uurrooster_freeRooms_retrieve(){
    $pid = $_POST['pid'];
    if ($pid) {
        $query = 'SELECT DISTINCT(l.field_uurrooster_les_lokaal_target_id) '
               . 'FROM {field_data_field_uurrooster_les_periode} AS p '
               . 'INNER JOIN {field_data_field_uurrooster_les_lokaal} AS l ON l.entity_id = p.entity_id '
               . 'WHERE p.field_uurrooster_les_periode_target_id = :pid';
        $result = db_query($query, array(':pid' => $pid));
        $currentRooms = $result->fetchCol();
        
        $query = 'SELECT l.field_lokaal_afkorting_value '
               . 'FROM {field_data_field_lokaal_afkorting} AS l '
               . 'INNER JOIN {field_data_field_lokaal_type} AS t ON l.entity_id = t.entity_id '
               . 'WHERE l.entity_id NOT IN ('.implode(',',$currentRooms).') AND t.field_lokaal_type_value = :type';
        $result = db_query($query, array(':type' => 'klaslokaal'));
        $freeRooms = $result->fetchCol();
        
        $cntr = 0;
        foreach ($freeRooms as $room) {
            $cntr++;
            print '<a href="/uurrooster/lokaal/'.$room.'">'.$room.'</a>';
            if ($cntr<count($freeRooms)) {
                print ', ';
            }
        }
    } else {
        print 0;
    }
    exit;
}

/**
 * Retrieve details of occupied rooms.
 */
function argus_uurrooster_occupiedRooms_retrieve(){
    $pid = $_POST['pid'];
    if ($pid) {
        $query = 'SELECT DISTINCT(l.field_uurrooster_les_lokaal_target_id) '
               . 'FROM {field_data_field_uurrooster_les_periode} AS p '
               . 'INNER JOIN {field_data_field_uurrooster_les_lokaal} AS l ON l.entity_id = p.entity_id '
               . 'WHERE p.field_uurrooster_les_periode_target_id = :pid';
        $result = db_query($query, array(':pid' => $pid));
        $currentRooms = $result->fetchCol();
        
        $query = 'SELECT l.field_lokaal_afkorting_value '
               . 'FROM {field_data_field_lokaal_afkorting} AS l '
               . 'WHERE l.entity_id IN ('.implode(',',$currentRooms).')';
        $result = db_query($query);
        $occupiedRooms = $result->fetchCol();
        
        $cntr = 0;
        foreach ($occupiedRooms as $room) {
            $cntr++;
            print '<a href="/uurrooster/lokaal/'.$room.'">'.$room.'</a>';
            if ($cntr<count($occupiedRooms)) {
                print ', ';
            }
        }
    } else {
        print 0;
    }
    exit;
}

/**
 * Retrieve details of free teachers.
 */
function argus_uurrooster_freeTeachers_retrieve(){
    $pid = $_POST['pid'];
    if ($pid) {
        $query = 'SELECT DISTINCT(u.uid) AS id '
               . 'FROM {field_data_field_uurrooster_les_periode} AS p '
               . 'INNER JOIN {field_data_field_uurrooster_les_leerkracht} AS l ON l.entity_id = p.entity_id '
               . 'INNER JOIN {users} AS u ON u.uid = l.field_uurrooster_les_leerkracht_target_id '
               . 'WHERE p.field_uurrooster_les_periode_target_id = :pid AND u.status = 1';
        $unavailableTeachers = array_keys(db_query($query, array(':pid' => $pid))->fetchAllAssoc('id',PDO::FETCH_NAMED));
        
        $role = user_role_load_by_name('leerkracht');
        $query = 'SELECT DISTINCT(u.uid) AS id '
        		. 'FROM {users} AS u '
        		. 'INNER JOIN {users_roles} AS ur ON u.uid = ur.uid '
        		. 'WHERE u.uid NOT IN (:uids) AND ur.rid = :rid AND status = 1';
        $availableTeachers = array_keys(db_query($query, array(':uids' => $unavailableTeachers, ':rid' => $role->rid))->fetchAllAssoc('id',PDO::FETCH_NAMED));
        
        if (count($availableTeachers) > 0) {
            print '<ol>';
            foreach ($availableTeachers as $t) {
                print '<li><a href="/uurrooster/leerkracht/'.$t.'">'.argus_get_user_realname($t).'</a></li>';
            }
            print '</ol>';
        } else {
            print 0;
        }
    } else {
        print 0;
    }
    exit;
}

/**
 * Retrieve details from day and location about supervision.
 */
function argus_uurrooster_supervision_retrieve(){
	global $user, $base_url;
	
	$did = $_POST['did'];
	$lid = $_POST['lid'];
	if ($did && $lid) {
		$query = new EntityFieldQuery();
		$query->entityCondition('entity_type', 'node')
			->entityCondition('bundle', 'uurrooster_toezicht')
			->propertyCondition('status', NODE_PUBLISHED)
			->fieldCondition('field_uurrooster_toez_dag', 'value', $did, '=')
			->fieldCondition('field_uurrooster_toez_locatie', 'target_id', $lid, '=');
		$currentSupervisions = $query->execute();

		// Edit and delete existing supervisions
		if (count($currentSupervisions)>0 && (user_access('edit any uurrooster_toezicht content') || user_access('delete any uurrooster_toezicht content'))){
			foreach ($currentSupervisions['node'] as $k => $cs){
				$currentSupervision = (array) node_load($k);
				$currentSupervisor = $currentSupervision['field_uurrooster_toez_toezichter'][LANGUAGE_NONE][0]['target_id'];
				echo '<div><h4><a href="'.$base_url.'/uurrooster/leerkracht/'.$currentSupervisor.'">'.argus_get_user_realname($currentSupervisor).'</a></h4>';
				$actions = array();
				if (user_access('edit any uurrooster_toezicht content')){
					$actions[] = '<a href="'.$base_url.'/node/'.$k.'/edit" style="font-size: smaller;">bewerken</a>';
				}
				if (user_access('delete any uurrooster_toezicht content')){
					$actions[] = '<a href="#" onclick="javascript: argus_uurrooster_supervision_delete('.$k.');" style="font-size: smaller;">verwijderen</a>';
				}
				echo implode(' - ', $actions).'</div>';
			}
		} elseif (count($currentSupervisions)==0 && user_access('create uurrooster_toezicht content')){
			// 1. Get starting period; returns NULL array when supervision is at the start of the day
			$query = 'SELECT pd.entity_id AS id '
					. 'FROM {field_data_field_uurrooster_toez_start} AS ts '
					. 'INNER JOIN {field_data_field_uurrooster_periode_dag} AS pd ON ts.field_uurrooster_toez_start_target_id = pd.entity_id '
					. 'WHERE ts.entity_id = :lid AND pd.field_uurrooster_periode_dag_value = :did';
			$period = db_query($query, array(':lid' => $lid, ':did' => $did))->fetchCol();
			
			if (count($period)){
				$period = (array) node_load($period[0]);
				$periodPeriod = $period['field_uurrooster_periode_periode'][LANGUAGE_NONE][0]['value'];
			} else {
				$periodPeriod = 1;
			}
			
			// 3. Get users with prior lesson(s) before this substitution
			if (count($period)){
				$query = 'SELECT DISTINCT(l.field_uurrooster_les_leerkracht_target_id) AS id '
						. 'FROM {field_data_field_uurrooster_les_periode} AS p '
						. 'INNER JOIN {field_data_field_uurrooster_les_leerkracht} AS l ON l.entity_id = p.entity_id '
						. 'INNER JOIN {field_data_field_uurrooster_periode_periode} AS pp ON pp.entity_id = p.field_uurrooster_les_periode_target_id '
        				. 'INNER JOIN {field_data_field_uurrooster_periode_dag} AS pd ON pd.entity_id = p.field_uurrooster_les_periode_target_id '
        				. 'WHERE pp.field_uurrooster_periode_periode_value = :period '
        				. 'AND pd.field_uurrooster_periode_dag_value = :day ';
				$availableTeachersPrior = array_keys(db_query($query, array(':period' => $periodPeriod, ':day' => $did))->fetchAllAssoc('id',PDO::FETCH_NAMED));
			}
			 
			// 4. Get users with following lesson(s) after this substitution
			if ($periodPeriod<8){ //TODO Get max value from database (replace fixed '8')
				$query = 'SELECT DISTINCT(l.field_uurrooster_les_leerkracht_target_id) AS id '
						. 'FROM {field_data_field_uurrooster_les_periode} AS p '
						. 'INNER JOIN {field_data_field_uurrooster_les_leerkracht} AS l ON l.entity_id = p.entity_id '
						. 'INNER JOIN {field_data_field_uurrooster_periode_periode} AS pp ON pp.entity_id = p.field_uurrooster_les_periode_target_id '
        				. 'INNER JOIN {field_data_field_uurrooster_periode_dag} AS pd ON pd.entity_id = p.field_uurrooster_les_periode_target_id '
        				. 'WHERE pp.field_uurrooster_periode_periode_value = :period '
        				. 'AND pd.field_uurrooster_periode_dag_value = :day ';
				$availableTeachersAfter = array_keys(db_query($query, array(':period' => $periodPeriod+1, ':day' => $did))->fetchAllAssoc('id',PDO::FETCH_NAMED));
			}
			
			// Get candidate substitute users
			$query = 'SELECT DISTINCT(u.uid) AS id '
					. 'FROM {users} AS u '
					. 'INNER JOIN {users_roles} AS ur ON u.uid = ur.uid '
					. 'WHERE u.uid NOT IN (:uidsNOK) AND ur.rid IN (:rids) AND status = 1';
			$params[':rids'] = variable_get('argus_uurrooster_supervisions_roles');
			if (count(variable_get('argus_uurrooster_supervisions_exemptions'))){
				$params[':uidsNOK'] = variable_get('argus_uurrooster_supervisions_exemptions');
			} else {
				$params[':uidsNOK'] = array(-1);
			}
			$availableTeachers = array_keys(db_query($query, $params)->fetchAllAssoc('id',PDO::FETCH_NAMED));
			
			// A. List all candidate substitute users with a prior and following lesson
			if (isset($availableTeachersPrior) && isset($availableTeachersAfter)){
				$foundUsers = array();
				foreach ($availableTeachers as $k => $t){
					if (in_array($t, $availableTeachersPrior) && in_array($t, $availableTeachersAfter)){
						$style = '';
						
						$query = 'SELECT DISTINCT(l.entity_id) AS lessons '
								. 'FROM {field_data_field_uurrooster_les_leerkracht} AS l '
								. 'WHERE l.field_uurrooster_les_leerkracht_target_id = :uid ';
						$totalLessons = count(db_query($query, array(':uid' => $t))->fetchCol());
						
						// Get current status for this user
						foreach (array('kort','lang') as $tl){
							foreach (array('effectief','vervanger') as $tt){
								$query = 'SELECT u.entity_id AS id '
										. 'FROM {field_data_field_uurrooster_toez_toezichter} AS u '
										. 'INNER JOIN {field_data_field_uurrooster_toez_locatie} AS l ON l.entity_id = u.entity_id '
										. 'INNER JOIN {field_data_field_uurrooster_toez_lengte} AS tl ON tl.entity_id = l.field_uurrooster_toez_locatie_target_id '
										. 'INNER JOIN {field_data_field_uurrooster_toez_type} AS tt ON tt.entity_id = l.field_uurrooster_toez_locatie_target_id '
										. 'INNER JOIN {field_data_field_user_sms_naam} AS un ON un.entity_id = u.field_uurrooster_toez_toezichter_target_id '
										. 'INNER JOIN {field_data_field_user_sms_voornaam} AS uv ON uv.entity_id = u.field_uurrooster_toez_toezichter_target_id '
										. 'WHERE u.field_uurrooster_toez_toezichter_target_id = :uid AND tl.field_uurrooster_toez_lengte_value = :ll AND tt.field_uurrooster_toez_type_value = :tt '
										. 'ORDER BY un.field_user_sms_naam_value ASC, uv.field_user_sms_voornaam_value ASC';
								$totalSupervisions[$tl][$tt] = count(db_query($query, array(':uid' => $t, ':ll' => $tl, ':tt' => $tt))->fetchAll());
								$totalLessons .= ', '.$totalSupervisions[$tl][$tt];
							}
						}
						if ($totalSupervisions['kort']['effectief']>2 || 
							$totalSupervisions['lang']['effectief']>1 ||
							($totalSupervisions['kort']['effectief']>1 && $totalSupervisions['lang']['effectief']>0) ||
							($totalSupervisions['kort']['effectief']>0 && $totalSupervisions['lang']['vervanger']>0) ||
							$totalSupervisions['kort']['vervanger']>3 ||
							$totalSupervisions['lang']['vervanger']>2){
							$style = 'style="color: red !important; display: none;" class="argus_uurrooster_overloaded"';
						}
						
						$foundUsers[argus_get_user_realname($t)] = '<li '.$style.'><a href="#" onclick="javascript: argus_uurrooster_supervision_create('.$t.','.$did.','.$lid.');" title="Leerkracht (aantal lesuren, korte & lange - effectief/vervangend - toezichten) - klik om deze gebruiker toe te wijzen aan het geselecteerde uur">'.argus_get_user_realname($t).'</a><div style="font-size: smaller; line-height: 1em;">('.$totalLessons.')</div></li>';
						unset($availableTeachers[$k]);
					}
				}
				if ($foundUsers){
					ksort($foundUsers);
					print '<h3>Niveau 1</h3><div style="font-size: smaller">(les voor en na het toezicht)</div><ul>'.implode('',$foundUsers).'</ul>';
				}
			}
			
     		// B. List all candidate substitute users with a prior lesson
			if (isset($availableTeachersPrior)){
				$foundUsers = array();
				foreach ($availableTeachers as $k => $t){
					if (in_array($t, $availableTeachersPrior)){
						$style = '';
						
						$query = 'SELECT DISTINCT(l.entity_id) AS lessons '
								. 'FROM {field_data_field_uurrooster_les_leerkracht} AS l '
								. 'WHERE l.field_uurrooster_les_leerkracht_target_id = :uid ';
						$totalLessons = count(db_query($query, array(':uid' => $t))->fetchCol());
					
						// Get current status for this user
						foreach (array('kort','lang') as $tl){
							foreach (array('effectief','vervanger') as $tt){
								$query = 'SELECT u.entity_id AS id '
										. 'FROM {field_data_field_uurrooster_toez_toezichter} AS u '
										. 'INNER JOIN {field_data_field_uurrooster_toez_locatie} AS l ON l.entity_id = u.entity_id '
										. 'INNER JOIN {field_data_field_uurrooster_toez_lengte} AS tl ON tl.entity_id = l.field_uurrooster_toez_locatie_target_id '
										. 'INNER JOIN {field_data_field_uurrooster_toez_type} AS tt ON tt.entity_id = l.field_uurrooster_toez_locatie_target_id '
										. 'WHERE u.field_uurrooster_toez_toezichter_target_id = :uid AND tl.field_uurrooster_toez_lengte_value = :ll AND tt.field_uurrooster_toez_type_value = :tt';
								$totalSupervisions[$tl][$tt] = count(db_query($query, array(':uid' => $t, ':ll' => $tl, ':tt' => $tt))->fetchAll());
								$totalLessons .= ', '.$totalSupervisions[$tl][$tt];
							}
						}
						if ($totalSupervisions['kort']['effectief']>2 || 
							$totalSupervisions['lang']['effectief']>1 ||
							($totalSupervisions['kort']['effectief']>1 && $totalSupervisions['lang']['effectief']>0) ||
							($totalSupervisions['kort']['effectief']>0 && $totalSupervisions['lang']['vervanger']>0) ||
							$totalSupervisions['kort']['vervanger']>3 ||
							$totalSupervisions['lang']['vervanger']>2){
							$style = 'style="color: red !important; display: none;" class="argus_uurrooster_overloaded"';
						}
						
						$foundUsers[argus_get_user_realname($t)] = '<li '.$style.'><a href="#" onclick="javascript: argus_uurrooster_supervision_create('.$t.','.$did.','.$lid.');" title="Leerkracht (aantal lesuren, korte & lange - effectief/vervangend - toezichten) - klik om deze gebruiker toe te wijzen aan het geselecteerde uur">'.argus_get_user_realname($t).'</a><div style="font-size: smaller; line-height: 1em;">('.$totalLessons.')</div></li>';
						unset($availableTeachers[$k]);
					}
				}
				if ($foundUsers){
					ksort($foundUsers);
					print '<h4>Niveau 2</h4><div style="font-size: smaller">(les voor het toezicht)</div><ul>'.implode('',$foundUsers).'</ul>';
				}
			}
     
			// C. List all candidate substitute users with a following lesson
			if (isset($availableTeachersAfter)){
				$foundUsers = array();
				foreach ($availableTeachers as $k => $t){
					if (in_array($t, $availableTeachersAfter)){
						$style = '';
						
						$query = 'SELECT DISTINCT(l.entity_id) AS lessons '
								. 'FROM {field_data_field_uurrooster_les_leerkracht} AS l '
								. 'WHERE l.field_uurrooster_les_leerkracht_target_id = :uid ';
						$totalLessons = count(db_query($query, array(':uid' => $t))->fetchCol());
					
						// Get current status for this user
						foreach (array('kort','lang') as $tl){
							foreach (array('effectief','vervanger') as $tt){
								$query = 'SELECT u.entity_id AS id '
										. 'FROM {field_data_field_uurrooster_toez_toezichter} AS u '
										. 'INNER JOIN {field_data_field_uurrooster_toez_locatie} AS l ON l.entity_id = u.entity_id '
										. 'INNER JOIN {field_data_field_uurrooster_toez_lengte} AS tl ON tl.entity_id = l.field_uurrooster_toez_locatie_target_id '
										. 'INNER JOIN {field_data_field_uurrooster_toez_type} AS tt ON tt.entity_id = l.field_uurrooster_toez_locatie_target_id '
										. 'WHERE u.field_uurrooster_toez_toezichter_target_id = :uid AND tl.field_uurrooster_toez_lengte_value = :ll AND tt.field_uurrooster_toez_type_value = :tt';
								$totalSupervisions[$tl][$tt] = count(db_query($query, array(':uid' => $t, ':ll' => $tl, ':tt' => $tt))->fetchAll());
								$totalLessons .= ', '.$totalSupervisions[$tl][$tt];
							}
						}
						if ($totalSupervisions['kort']['effectief']>2 || 
							$totalSupervisions['lang']['effectief']>1 ||
							($totalSupervisions['kort']['effectief']>1 && $totalSupervisions['lang']['effectief']>0) ||
							($totalSupervisions['kort']['effectief']>0 && $totalSupervisions['lang']['vervanger']>0) ||
							$totalSupervisions['kort']['vervanger']>3 ||
							$totalSupervisions['lang']['vervanger']>2){
							$style = 'style="color: red !important; display: none;" class="argus_uurrooster_overloaded"';
						}
						
						$foundUsers[argus_get_user_realname($t)] = '<li '.$style.'><a href="#" onclick="javascript: argus_uurrooster_supervision_create('.$t.','.$did.','.$lid.');" title="Leerkracht (aantal lesuren, korte & lange - effectief/vervangend - toezichten) - klik om deze gebruiker toe te wijzen aan het geselecteerde uur">'.argus_get_user_realname($t).'</a><div style="font-size: smaller; line-height: 1em;">('.$totalLessons.')</div></li>';
						unset($availableTeachers[$k]);
					}
				}
				if ($foundUsers){
					ksort($foundUsers);
					print '<h4>Niveau 3</h4><div style="font-size: smaller">(les na het toezicht)</div><ul>'.implode('',$foundUsers).'</ul>';
				}
			}
     
			// D. List all other candidate substitute users
			$foundUsers = array();
			foreach ($availableTeachers as $k => $t){
				$style = '';
				
				$query = 'SELECT DISTINCT(l.entity_id) AS lessons '
						. 'FROM {field_data_field_uurrooster_les_leerkracht} AS l '
						. 'WHERE l.field_uurrooster_les_leerkracht_target_id = :uid ';
				$totalLessons = count(db_query($query, array(':uid' => $t))->fetchCol());
	
				// Get current status for this user
				foreach (array('kort','lang') as $tl){
					foreach (array('effectief','vervanger') as $tt){
						$query = 'SELECT u.entity_id AS id '
								. 'FROM {field_data_field_uurrooster_toez_toezichter} AS u '
								. 'INNER JOIN {field_data_field_uurrooster_toez_locatie} AS l ON l.entity_id = u.entity_id '
								. 'INNER JOIN {field_data_field_uurrooster_toez_lengte} AS tl ON tl.entity_id = l.field_uurrooster_toez_locatie_target_id '
								. 'INNER JOIN {field_data_field_uurrooster_toez_type} AS tt ON tt.entity_id = l.field_uurrooster_toez_locatie_target_id '
								. 'WHERE u.field_uurrooster_toez_toezichter_target_id = :uid AND tl.field_uurrooster_toez_lengte_value = :ll AND tt.field_uurrooster_toez_type_value = :tt';
						$totalSupervisions[$tl][$tt] = count(db_query($query, array(':uid' => $t, ':ll' => $tl, ':tt' => $tt))->fetchAll());
						$totalLessons .= ', '.$totalSupervisions[$tl][$tt];
					}
				}
				if ($totalSupervisions['kort']['effectief']>2 || 
					$totalSupervisions['lang']['effectief']>1 ||
					($totalSupervisions['kort']['effectief']>1 && $totalSupervisions['lang']['effectief']>0) ||
					($totalSupervisions['kort']['effectief']>0 && $totalSupervisions['lang']['vervanger']>0) ||
					$totalSupervisions['kort']['vervanger']>3 ||
					$totalSupervisions['lang']['vervanger']>2){
					$style = 'style="color: red !important; display: none;" class="argus_uurrooster_overloaded"';
				}
				
				$foundUsers[argus_get_user_realname($t)] = '<li '.$style.'><a href="#" onclick="javascript: argus_uurrooster_supervision_create('.$t.','.$did.','.$lid.');" title="Leerkracht (aantal lesuren, korte & lange - effectief/vervangend - toezichten) - klik om deze gebruiker toe te wijzen aan het geselecteerde uur">'.argus_get_user_realname($t).'</a><div style="font-size: smaller; line-height: 1em;">('.$totalLessons.')</div></li>';
				unset($availableTeachers[$k]);
			}
			if ($foundUsers){
				ksort($foundUsers);
				print '<h4>Niveau 4</h4><div style="font-size: smaller">(geen les voor of na het toezicht)</div><ul>'.implode('',$foundUsers).'</ul>';
			}
		} else {
			print 0;
		}
	} else {
		print 0;
	}
	exit;
}



/**
 * Create substitution.
 */
function argus_uurrooster_substitution_create(){
	global $user;
	
	$uid = $_POST['uid'];
	$pid = $_POST['pid'];
	if ($uid) {
		$node = new stdClass();
		$node->type = 'uurrooster_permanentie';
		$node->language = LANGUAGE_NONE;
		$node->uid = $user->uid;
		$node->status = 1;
		$node->promote = 0;
		$node->comment = 0;
		node_object_prepare($node);

		$node->field_uurrooster_perm_periode[LANGUAGE_NONE][0]['target_id'] = $pid;
		$node->field_uurrooster_perm_vervanger[LANGUAGE_NONE][0]['target_id'] = $uid;
		
		// Save the node.
		node_save($node);
		print 1;
	} else {
		print 0;
	}
	exit;
}

/**
 * Delete substitution.
 */
function argus_uurrooster_substitution_delete(){
	$nid = $_POST['nid'];
	if ($nid) {
		node_delete($nid);
		print 1;
	} else {
		print 0;
	}
	exit;
}


/**
 * Create supervision.
 */
function argus_uurrooster_supervision_create(){
	global $user;
	
	$uid = $_POST['uid'];
	$lid = $_POST['lid'];
	$did = $_POST['did'];
	if ($uid && $lid && $did) {
		$node = new stdClass();
		$node->type = 'uurrooster_toezicht';
		$node->language = LANGUAGE_NONE;
		$node->uid = $user->uid;
		$node->status = 1;
		$node->promote = 0;
		$node->comment = 0;
		node_object_prepare($node);
		
		$node->field_uurrooster_toez_toezichter[LANGUAGE_NONE][0]['target_id'] = $uid;
		$node->field_uurrooster_toez_dag[LANGUAGE_NONE][0]['value'] = $did;
		$node->field_uurrooster_toez_locatie[LANGUAGE_NONE][0]['target_id'] = $lid;
		
		// Save the node.
		node_save($node);
		print 1;
	} else {
		print 0;
	}
	exit;
}

/**
 * Delete supervision.
 */
function argus_uurrooster_supervision_delete(){
	$nid = $_POST['nid'];
	if ($nid) {
		node_delete($nid);
		print 1;
	} else {
		print 0;
	}
	exit;
}

/**
 * Retrieve all hours for each day for user
 *
 * @param uid integer
 *   Get all hours for specified user
 *
 * @return array
 */
function argus_uurrooster_get_totaal_uren($uid){
	$query = 'SELECT DISTINCT pd.field_uurrooster_periode_dag_value AS day, COUNT(DISTINCT pp.field_uurrooster_periode_periode_value) AS period '
			. 'FROM {field_data_field_uurrooster_les_leerkracht} AS l '
			. 'LEFT JOIN {field_data_field_uurrooster_les_periode} AS lp ON l.entity_id = lp.entity_id '
			. 'LEFT JOIN {field_data_field_uurrooster_periode_dag} AS pd ON lp.field_uurrooster_les_periode_target_id = pd.entity_id '
			. 'LEFT JOIN {field_data_field_uurrooster_periode_periode} AS pp ON lp.field_uurrooster_les_periode_target_id = pp.entity_id '
			. 'WHERE l.field_uurrooster_les_leerkracht_target_id = :uid '
			. 'GROUP BY pd.field_uurrooster_periode_dag_value';
	$result = db_query($query, array(':uid' => $uid))->fetchAllKeyed();
	return $result;
}

/**
 * Retrieve current period
 *
 * @param time Date/time string
 *   Get the periode repersented by param or current time
 *
 * @return integer
 */
function argus_uurrooster_get_current_period($time = NULL){
	if (!$time){
		$time = date('Y-m-d H:i:s');
	}
	$query = 'SELECT p.nid AS id, p.title AS title '
			. 'FROM {node} AS p '
			. 'LEFT JOIN {field_data_field_uurrooster_periode_dag} AS pd ON p.nid = pd.entity_id '
			. 'LEFT JOIN {field_data_field_uurrooster_periode_start} AS ps ON p.nid = ps.entity_id '
			. 'LEFT JOIN {field_data_field_uurrooster_periode_eind} AS pe ON p.nid = pe.entity_id '
			. 'WHERE pd.field_uurrooster_periode_dag_value = :day '
			. 'AND ps.field_uurrooster_periode_start_value <= :now '
			. 'AND pe.field_uurrooster_periode_eind_value >= :now';
	$result = db_query($query, array(':day' => date('N', strtotime($time)), ':now' => date('Hi', strtotime($time))))->fetchAllKeyed();
	return $result;
}

/**
 * Retrieve current status for user
 *
 * @param uid integer
 *   Is the specified user currently active at this time
 *
 * @return array
 */
function argus_uurrooster_get_current_lesson($uid){
	$query = 'SELECT l.entity_id AS lid, '
			. 'lp.field_uurrooster_les_periode_target_id AS pid, '
			. 'll.field_uurrooster_les_lokaal_target_id AS lid, '
			. 'GROUP_CONCAT(DISTINCT lk.field_uurrooster_les_klassen_target_id SEPARATOR :glue) AS groups '
			. 'FROM {field_data_field_uurrooster_les_leerkracht} AS l '
			. 'LEFT JOIN {field_data_field_uurrooster_les_periode} AS lp ON l.entity_id = lp.entity_id '
			. 'LEFT JOIN {field_data_field_uurrooster_les_lokaal} AS ll ON l.entity_id = ll.entity_id '
			. 'LEFT JOIN {field_data_field_uurrooster_les_klassen} AS lk ON l.entity_id = lk.entity_id '
			. 'WHERE l.field_uurrooster_les_leerkracht_target_id = :uid '
			. 'AND l.entity_id != NULL '
			. 'AND lp.field_uurrooster_les_periode_target_id = :period '
			. 'GROUP BY l.field_uurrooster_les_leerkracht_target_id';
	$result = db_query($query, array(':uid' => $uid, ':glue' => ',', ':period' => key(argus_uurrooster_get_current_period())))->fetchAllAssoc('lid', PDO::FETCH_ASSOC);
	return $result;
}

/**
 * Retrieve first hours for each day for user
 *
 * @param uid integer
 *   Get first hours for specified user
 *
 * @return array
 */
function argus_uurrooster_get_eerste_uren($uid){
	$query = 'SELECT DISTINCT pd.field_uurrooster_periode_dag_value AS day, MIN(DISTINCT pp.field_uurrooster_periode_periode_value) AS period '
			. 'FROM {field_data_field_uurrooster_les_leerkracht} AS l '
			. 'LEFT JOIN {field_data_field_uurrooster_les_periode} AS lp ON l.entity_id = lp.entity_id '
			. 'LEFT JOIN {field_data_field_uurrooster_periode_dag} AS pd ON lp.field_uurrooster_les_periode_target_id = pd.entity_id '
			. 'LEFT JOIN {field_data_field_uurrooster_periode_periode} AS pp ON lp.field_uurrooster_les_periode_target_id = pp.entity_id '
			. 'WHERE l.field_uurrooster_les_leerkracht_target_id = :uid '
			. 'GROUP BY pd.field_uurrooster_periode_dag_value';
	$result = db_query($query, array(':uid' => $uid))->fetchAllKeyed();
	return $result;
}

/**
 * Retrieve final hours for each day for user
 *
 * @param uid integer
 *   Get final hours for specified user
 *
 * @return array
 */
function argus_uurrooster_get_laatste_uren($uid){
	$query = 'SELECT DISTINCT pd.field_uurrooster_periode_dag_value AS day, MAX(DISTINCT pp.field_uurrooster_periode_periode_value) AS period '
			. 'FROM {field_data_field_uurrooster_les_leerkracht} AS l '
			. 'LEFT JOIN {field_data_field_uurrooster_les_periode} AS lp ON l.entity_id = lp.entity_id '
			. 'LEFT JOIN {field_data_field_uurrooster_periode_dag} AS pd ON lp.field_uurrooster_les_periode_target_id = pd.entity_id '
			. 'LEFT JOIN {field_data_field_uurrooster_periode_periode} AS pp ON lp.field_uurrooster_les_periode_target_id = pp.entity_id '
			. 'WHERE l.field_uurrooster_les_leerkracht_target_id = :uid '
			. 'GROUP BY pd.field_uurrooster_periode_dag_value';
	$result = db_query($query, array(':uid' => $uid))->fetchAllKeyed();
	return $result;
}

/**
 * Retrieve courses for user
 *
 * @param uid integer
 *   Get courses for specified user
 *
 * @return array
 */
function argus_uurrooster_get_courses($uid){
	$query = 'SELECT va.entity_id AS id, va.field_vak_afkorting_value AS course '
			. 'FROM {field_data_field_uurrooster_les_leerkracht} AS l '
			. 'LEFT JOIN {field_data_field_uurrooster_les_vak} AS v ON l.entity_id = v.entity_id '
			. 'INNER JOIN {field_data_field_vak_afkorting} AS va ON va.entity_id = v.field_uurrooster_les_vak_target_id '
			. 'WHERE l.field_uurrooster_les_leerkracht_target_id = :uid';
	$result = db_query($query, array(':uid' => $uid))->fetchAllKeyed();
	return $result;
}

/**
 * Retrieve groups for user
 *
 * @param uid integer
 *   Get groups for specified user
 *
 * @return array
 */
function argus_uurrooster_get_groups($uid){
	$query = 'SELECT l.field_uurrooster_les_leerkracht_target_id AS id, GROUP_CONCAT(DISTINCT field_uurrooster_les_klassen_target_id SEPARATOR :glue) AS groups '
			. 'FROM {field_data_field_uurrooster_les_leerkracht} AS l '
			. 'INNER JOIN {field_data_field_uurrooster_les_klassen} AS k ON k.entity_id = l.entity_id '
			. 'WHERE l.field_uurrooster_les_leerkracht_target_id = :uid '
			. 'GROUP BY l.field_uurrooster_les_leerkracht_target_id';
	$result = db_query($query, array(':uid' => $uid, ':glue' => ','))->fetchAllKeyed();
	return $result;
}

/**
 * Retrieve supervisions for user
 *
 * @param uid integer
 *   Get supervisions for specified user
 *
 * @return array
 */
function argus_uurrooster_get_supervisions($uid){
	$query = 'SELECT n.nid AS id, n.title AS title, d.field_uurrooster_toez_dag_value AS day '
			. 'FROM {field_data_field_uurrooster_toez_toezichter} AS l '
			. 'INNER JOIN {node} AS n ON n.nid = l.entity_id '
			. 'INNER JOIN {field_data_field_uurrooster_toez_dag} AS d ON d.entity_id = l.entity_id '
			. 'WHERE l.field_uurrooster_toez_toezichter_target_id = :uid';
	$result = db_query($query, array(':uid' => $uid))->fetchAll();
	$days = array(1 => 'maandag',2 => 'dinsdag',3 => 'woensdag',4 => 'donderdag',5 => 'vrijdag',6 => 'zaterdag',7 => 'zondag',);
	foreach($result as $r){
		$r->title = t($days[$r->day]).' - '.$r->title;
	}
	return $result;
}

/**
 * Retrieve supervisions for user
 *
 * @param uid integer
 *   Get supervisions for specified user
 *
 * @return array
 */
function argus_uurrooster_get_substitutions($uid){
	$query = 'SELECT n.nid AS id, n.title AS title, d.field_uurrooster_periode_dag_value AS day, p.field_uurrooster_periode_periode_value AS period '
			. 'FROM {field_data_field_uurrooster_perm_vervanger} AS l '
			. 'INNER JOIN {node} AS n ON n.nid = l.entity_id '
			. 'INNER JOIN {field_data_field_uurrooster_perm_periode} AS pp ON pp.entity_id = l.entity_id '
			. 'INNER JOIN {field_data_field_uurrooster_periode_dag} AS d ON d.entity_id = pp.field_uurrooster_perm_periode_target_id '
			. 'INNER JOIN {field_data_field_uurrooster_periode_periode} AS p ON p.entity_id = pp.field_uurrooster_perm_periode_target_id '
			. 'WHERE l.field_uurrooster_perm_vervanger_target_id = :uid';
	$result = db_query($query, array(':uid' => $uid))->fetchAll();
	$days = array(1 => 'maandag',2 => 'dinsdag',3 => 'woensdag',4 => 'donderdag',5 => 'vrijdag',6 => 'zaterdag',7 => 'zondag',);
	foreach($result as $rid => $r){
		$result[$rid] = t($days[$r->day]).' - '.$r->period.'<sup>e</sup> lesuur';
	}
	return $result;
}

/**
 * Retrieve 'springuren' for user
 *
 * @param uid integer
 *   Get springuren for specified user
 *
 * @return int
 */
function argus_uurrooster_get_springuren($uid){
	$first_hours = argus_uurrooster_get_eerste_uren($uid);
	$last_hours = argus_uurrooster_get_laatste_uren($uid);
	$all_hours = argus_uurrooster_get_totaal_uren($uid);
	
	$cntr = 0;
	foreach ($all_hours as $k => $day){
		$cntr += abs($all_hours[$k] - ($last_hours[$k] - $first_hours[$k] + 1));
	}
	
	return $cntr;
}

/**
 * Retrieve 'index' for user
 *
 * @param uid integer
 *   Get index for specified user
 *
 * @return int
 */
function argus_uurrooster_get_assignment($uid){
	// Get all prospected users
	$data['course_types'] = array(
		'A' => array(
			1 => 22,
			2 => 21,
			3 => 20,
		),
		'C' => array(
			1 => 22,
			2 => 21,
			3 => 20,
		),
		'T' => array(
			1 => 22,
			2 => 21,
			3 => 20,
		),
		'P' => array(
			1 => 22,
			2 => 29,
			3 => 29,
		),
		'S' => array(
			3 => 29,
		),
		'RGOK' => array(
			0 => 20,
		),
		'RBPT' => array(
			0 => 20,
		),
		'RICT' => array(
			0 => 20,
		),
	);
	
	$cntr = array(
		'indexed' => array(),
		'real' => array(),
		'factor' => array(
			20 => 0,
			21 => 0,
			22 => 0,
			29 => 0,
		),
		'total' => array(
			'indexed' => 0,
			'real' => 0,
		),
		'index' => 0,
		'plage' => 0,
	);
	foreach ($data['course_types'] as $t => $type){
		foreach ($type as $grade => $hours){
			$query = 'SELECT DISTINCT p.field_uurrooster_les_periode_target_id AS id '
					. 'FROM {field_data_field_uurrooster_les_leerkracht} AS l '
					. 'INNER JOIN {node} AS n ON n.nid = l.entity_id '
					. 'INNER JOIN {field_data_field_uurrooster_les_periode} AS p ON p.entity_id = l.entity_id '
					. 'INNER JOIN {field_data_field_uurrooster_les_vak} AS v ON v.entity_id = l.entity_id '
					. 'INNER JOIN {field_data_field_vak_afkorting} AS va ON va.entity_id = v.field_uurrooster_les_vak_target_id ';
			
			$params = array(':uid' => $uid, ':course' => $t.'%');
			
			$multiply = 1;
			if ($grade == 0){
				$query .= 'WHERE l.field_uurrooster_les_leerkracht_target_id = :uid AND va.field_vak_afkorting_value LIKE :course';
				$multiply = 1/variable_get('argus_uurrooster_index_noncourses', 1);
			} else {
				$params[':grade'] = $grade;
				$query .= 'INNER JOIN {field_data_field_uurrooster_les_klassen} AS k ON k.entity_id = l.entity_id ';
				$query .= 'INNER JOIN {field_data_field_klas_graad} AS kg ON kg.entity_id = k.field_uurrooster_les_klassen_target_id ';
				$query .= 'WHERE l.field_uurrooster_les_leerkracht_target_id = :uid AND va.field_vak_afkorting_value LIKE :course AND kg.field_klas_graad_value = :grade';
			}
			
			$cnt = db_query($query, $params)->rowCount();
			$cntr['indexed'][$t][$grade] = floor($cnt * $multiply);
			$cntr['real'][$t][$grade] = $cnt;
			
			$cntr['factor'][$hours] += $cntr['indexed'][$t][$grade];

			$cntr['index'] += $cntr['indexed'][$t][$grade]/$hours;
			
			$cntr['total']['real'] += $cntr['real'][$t][$grade];
			$cntr['total']['indexed'] += $cntr['indexed'][$t][$grade];
		}
	}
	
	// Get plage-index
	arsort($cntr['factor']); // Set to highest factor
	if ($cntr['index']>1){
		$f = key($cntr['factor']);
		$cntr['plage'] = floor(($cntr['index'] - 1) / (1/$f)) . '/'.$f;
	}
	
	return $cntr;
}
