<?php

/**
 * @file
 * Install, update, and uninstall functions for the Aankoopdossiers module.
 */

/**
 * Implementation of hook_install().
 */
function argus_werkgroepen_install() {
	$type = 'werkgroep'; // replace with your content type name
	                     
	// Rebuild and define new content type
	node_types_rebuild ();
	$types = node_type_get_types ();
	
	// Add the body field with specified label
	node_add_body_field ( $types [$type], $label = t ( 'Omschrijving' ) ); // replace your label or remove if no body-field necessary
	                                                                       
	// Add field bases which are copied from your Features-based module
	                                                                       // More details function argus_werkgroepen_field_default_field_bases()
	foreach ( argus_werkgroepen_field_default_field_bases () as $field_name => $field ) {
		if (! field_info_field ( $field_name )) {
			field_create_field ( $field );
		}
	}
	
	// Add field instances which are copied from your Features-based module
	// More details function argus_werkgroepen_field_default_field_instances()
	foreach ( argus_werkgroepen_field_default_field_instances () as $fieldinstance ) {
		field_create_instance ( $fieldinstance );
	}
	
	// Add conditional_fields which are copied from your Features-based module
	// More details function argus_werkgroepen_conditional_fields_default_fields()
	if (function_exists ( 'argus_werkgroepen_conditional_fields_default_fields' )) {
		foreach ( argus_werkgroepen_conditional_fields_default_fields () as $conditionalfield ) {
			$dependee = field_info_instance ( 'node', $conditionalfield ['dependee'], $type );
			$dependent = field_info_instance ( 'node', $conditionalfield ['dependent'], $type );
			conditional_fields_dependency_insert ( $dependee ['id'], $dependent ['id'], $conditionalfield ['options'] );
		}
	}
}

/**
 * Implementation of hook_uninstall().
 */
function argus_werkgroepen_uninstall() {
	$type = 'werkgroep'; // replace with your content type name
	                     
	// Delete all conditional_fields
	if (function_exists ( 'argus_werkgroepen_conditional_fields_default_fields' )) {
		foreach ( argus_werkgroepen_conditional_fields_default_fields () as $conditionalfield ) {
			$dependee = field_info_instance ( 'node', $conditionalfield ['dependee'], $type );
			conditional_fields_field_delete_instance ( $dependee );
		}
	}
	
	// Remove all nodes of new content type
	$sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
	$result = db_query ( $sql, array (
			':type' => $type 
	) );
	$nodeids = array ();
	foreach ( $result as $row ) {
		$nodeids [] = $row->nid;
	}
	node_delete_multiple ( $nodeids );
	
	// Delete all related fields
	foreach ( argus_werkgroepen_field_default_field_bases () as $field_name => $field ) {
		$field_info = field_info_field ( $field_name );
		if (count ( $field_info ['bundles'] ['node'] ) < 2) { // Check if field is enabled for other modules
			field_delete_field ( $field_name );
		}
	}
	$instances = field_info_instances ( 'node', $type );
	foreach ( $instances as $instance_name => $fieldinstance ) {
		field_delete_instance ( $fieldinstance );
	}
	
	// Remove new content type
	node_type_delete ( $type );
	
	// Remove blocks
	if (db_table_exists ( 'block' )) {
		db_delete ( 'block' )->condition ( 'module', 'argus_werkgroepen' )->execute ();
	}
}

/**
 * Implements hook_field_default_field_bases().
 *
 * This function is copied from the file generated by the Features module: argus_werkgroepen.features.field_base.inc
 */
function argus_werkgroepen_field_default_field_bases() {
	$field_bases = array ();
	
	// Exported field_base: 'field_personeelsleden'.
	$field_bases ['field_personeelsleden'] = array (
			'active' => 1,
			'cardinality' => - 1,
			'deleted' => 0,
			'entity_types' => array (),
			'field_name' => 'field_personeelsleden',
			'field_permissions' => array (
					'type' => 0 
			),
			'indexes' => array (
					'target_id' => array (
							0 => 'target_id' 
					) 
			),
			'locked' => 0,
			'module' => 'entityreference',
			'settings' => array (
					'handler' => 'views',
					'handler_settings' => array (
							'behaviors' => array (
									'views-select-list' => array (
											'status' => 0 
									) 
							),
							'view' => array (
									'args' => array (),
									'display_name' => 'users_personeel',
									'view_name' => 'gebruikers' 
							) 
					),
					'target_type' => 'user' 
			),
			'translatable' => 0,
			'type' => 'entityreference' 
	);
	
	// Exported field_base: 'field_voorzitter'.
	$field_bases ['field_voorzitter'] = array (
			'active' => 1,
			'cardinality' => 1,
			'deleted' => 0,
			'entity_types' => array (),
			'field_name' => 'field_voorzitter',
			'field_permissions' => array (
					'type' => 0 
			),
			'indexes' => array (
					'target_id' => array (
							0 => 'target_id' 
					) 
			),
			'locked' => 0,
			'module' => 'entityreference',
			'settings' => array (
					'handler' => 'views',
					'handler_settings' => array (
							'behaviors' => array (
									'views-select-list' => array (
											'status' => 0 
									) 
							),
							'view' => array (
									'args' => array (),
									'display_name' => 'users_personeel',
									'view_name' => 'gebruikers' 
							) 
					),
					'target_type' => 'user' 
			),
			'translatable' => 0,
			'type' => 'entityreference' 
	);
	
	return $field_bases;
}

/**
 * Implements hook_field_default_field_instances().
 *
 * This function is copied from the file generated by the Features module: argus_werkgroepen.features.field_base.inc
 */
function argus_werkgroepen_field_default_field_instances() {
	$field_instances = array ();
	
	// Exported field_instance: 'node-werkgroep-field_personeelsleden'.
	$field_instances ['node-werkgroep-field_personeelsleden'] = array (
			'bundle' => 'werkgroep',
			'deleted' => 0,
			'description' => '',
			'display' => array (
					'default' => array (
							'label' => 'above',
							'module' => 'entityreference',
							'settings' => array (
									'conditions' => array (),
									'link' => 1 
							),
							'type' => 'entityreference_label',
							'weight' => 3 
					),
					'teaser' => array (
							'label' => 'above',
							'settings' => array (),
							'type' => 'hidden',
							'weight' => 0 
					) 
			),
			'entity_type' => 'node',
			'field_name' => 'field_personeelsleden',
			'label' => 'Leden',
			'required' => 0,
			'settings' => array (
					'user_register_form' => FALSE 
			),
			'widget' => array (
					'active' => 0,
					'module' => 'multiselect',
					'settings' => array (),
					'type' => 'multiselect',
					'weight' => 6 
			) 
	);
	
	// Exported field_instance: 'node-werkgroep-field_voorzitter'.
	$field_instances ['node-werkgroep-field_voorzitter'] = array (
			'bundle' => 'werkgroep',
			'default_value' => NULL,
			'deleted' => 0,
			'description' => '',
			'display' => array (
					'default' => array (
							'label' => 'inline',
							'module' => 'entityreference',
							'settings' => array (
									'conditions' => array (),
									'link' => 1 
							),
							'type' => 'entityreference_label',
							'weight' => 2 
					),
					'teaser' => array (
							'label' => 'above',
							'settings' => array (),
							'type' => 'hidden',
							'weight' => 0 
					) 
			),
			'entity_type' => 'node',
			'field_name' => 'field_voorzitter',
			'label' => 'Voorzitter',
			'required' => 0,
			'settings' => array (
					'user_register_form' => FALSE 
			),
			'widget' => array (
					'active' => 1,
					'module' => 'entityreference',
					'settings' => array (
							'match_operator' => 'CONTAINS',
							'path' => '',
							'size' => 60 
					),
					'type' => 'entityreference_autocomplete',
					'weight' => 5 
			) 
	);
	
	// Translatables
	// Included for use with string extractors like potx.
	t ( 'Leden' );
	t ( 'Voorzitter' );
	
	return $field_instances;
}

